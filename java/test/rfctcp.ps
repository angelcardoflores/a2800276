%!PS-Adobe-3.0
%%Title: rfc793.txt
%%For: Tim Becker
%%Creator: a2ps version 4.13
%%CreationDate: Wed May 22 16:14:32 2002
%%BoundingBox: 24 24 571 818
%%DocumentData: Clean7Bit
%%Orientation: Landscape
%%Pages: 46
%%PageOrder: Ascend
%%DocumentMedia: a4 595 842 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-BoldOblique
%%+ font Courier-Oblique
%%+ font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Roman
%%DocumentProcessColors: Black 
%%DocumentSuppliedResources: procset a2ps-a2ps-hdr
%%+ procset a2ps-black+white-Prolog
%%+ encoding ISO-8859-1Encoding
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% EPSF import as in the Red Book
/BeginInclude {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack 
  userdict begin
    0 setgray 0 setlinecap
    1 setlinewidth 0 setlinejoin
    10 setmiterlimit [ ] 0 setdash newpath
    gs_languagelevel 1 ne {
      false setstrokeadjust false setoverprint 
    } if
} bind def

/EndInclude {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

/BeginEPSF {
  BeginInclude
  /showpage { } def
} bind def

/EndEPSF {
  EndInclude
} bind def

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencode_font {
  findfont reencode 2 copy definefont pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def

% Return the y size of the current font
% - => fontsize
/currentfontsize {
  currentfont /FontMatrix get 3 get 1000 mul
} bind def

% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    % We use `load' because sometimes BBox is executable, sometimes not.
    % Since we need 4 numbers an not an array avoid BBox from being executed
    /FontBBox load aload pop
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Define these in case they're not in the FontInfo (also, here
    % they're easier to get to.
    /UnderlinePosition 1 def
    /UnderlineThickness 1 def
    
    % Get the underline position and thickness if they're defined.
    currentdict /FontInfo known {
      FontInfo
      
      dup /UnderlinePosition known {
	dup /UnderlinePosition get
	0 exch FontMatrix transform exch pop
	/UnderlinePosition exch def
      } if
      
      dup /UnderlineThickness known {
	/UnderlineThickness get
	0 exch FontMatrix transform exch pop
	/UnderlineThickness exch def
      } if
      
    } if
    currentdict 
  end 
} bind def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

%%BeginResource: procset a2ps-a2ps-hdr 2.0 2
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.95 setgray
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
%%IncludeResource: font Helvetica
  fHelvetica fnfs 0.8 mul scalefont setfont
  % 3. The left title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    fnfs 0.8 mul hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    dup
    pw exch stringwidth pop fnfs 0.8 mul add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub fnfs 0.8 mul sub fnfs 0.8 mul sub
    % stk: ct space_left
%%IncludeResource: font Helvetica-Bold
  fHelvetica-Bold fnfs scalefont setfont
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
%%IncludeResource: font Times-Bold
  fTimes-Bold 100 scalefont setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  fHelvetica fnfs 0.8 mul scalefont setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  fHelvetica fnfs 0.8 mul scalefont setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def
%%EndResource
%%BeginResource: procset a2ps-black+white-Prolog 2.0 1

% Function T(ab), jumps to the n-th tabulation in the current line
/T { 
  cw mul x0 add y0 moveto
} bind def

% Function n: move to the next line
/n { %def
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
}  bind def

/S {
  Show
} bind def

/p {
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/sy {
  false UL
  false BX
  fSymbol bfs scalefont setfont
  Show
} bind def

/k {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/K {
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/c {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/C {
  false UL
  false BX
  fCourier-BoldOblique bfs scalefont setfont
  Show 
} bind def

/l {
  false UL
  false BX
  fHelvetica bfs scalefont setfont
  Show
} bind def

/L {
  false UL
  false BX
  fHelvetica-Bold bfs scalefont setfont
  Show 
} bind def

/str{
  false UL
  false BX
  fTimes-Roman bfs scalefont setfont
  Show
} bind def

/e{
  false UL
  true BX
  fHelvetica-Bold bfs scalefont setfont
  Show
} bind def

%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Oblique
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Times-Roman
%%IncludeResource: font Symbol
%%IncludeResource: font Courier-BoldOblique
%%BeginResource: encoding ISO-8859-1Encoding
/ISO-8859-1Encoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /minus /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /less /equal /greater /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section 
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron 
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /bullet 
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown 
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla 
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply 
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla 
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis 
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide 
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
] def
%%EndResource
% Initialize page description variables.
/sh 595 def
/sw 842 def
/llx 24 def
/urx 818 def
/ury 571 def
/lly 24 def
/#copies 1 def
/th 0.000000 def
/fnfs 11 def
/bfs 8.005733 def
/cw 4.803440 def

% Dictionary for ISO-8859-1 support
/iso1dict 8 dict begin
  /fCourier ISO-8859-1Encoding /Courier reencode_font
  /fCourier-Bold ISO-8859-1Encoding /Courier-Bold reencode_font
  /fCourier-BoldOblique ISO-8859-1Encoding /Courier-BoldOblique reencode_font
  /fCourier-Oblique ISO-8859-1Encoding /Courier-Oblique reencode_font
  /fHelvetica ISO-8859-1Encoding /Helvetica reencode_font
  /fHelvetica-Bold ISO-8859-1Encoding /Helvetica-Bold reencode_font
  /fTimes-Bold ISO-8859-1Encoding /Times-Bold reencode_font
  /fTimes-Roman ISO-8859-1Encoding /Times-Roman reencode_font
currentdict end def
/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
/fSymbol /Symbol findfont def
/hm fnfs 0.25 mul def
/pw
   cw 81.400000 mul
def
/ph
   541.988093 th add
def
/pmw urx llx sub pw 2 mul sub 1 div def
/pmh 0 def
/v 0 def
/x [
  0
  dup pmw add pw add
] def
/y [
  pmh ph add 0 mul ph add
  dup
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury fnfs 0.8 mul sub def
/sx 0 def
/tab 8 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1-2) 1
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
() N
(RFC: 793) N
(                                    ) N
(                                    ) N
(                                    ) N
(                                    ) N
(                                    ) N
(                                    ) N
(                                    ) N
(                     TRANSMISSION CONTROL PROTOCOL) N
(                                    ) N
(                                    ) N
(                         DARPA INTERNET PROGRAM) N
(                                    ) N
(                         PROTOCOL SPECIFICATION) N
(                                    ) N
(                                    ) N
(                                    ) N
(                             September 1981) N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
(                              prepared for) N
(                                    ) N
(               Defense Advanced Research Projects Agency) N
(                Information Processing Techniques Office) N
(                         1400 Wilson Boulevard) N
(                       Arlington, Virginia  22209) N
() N
() N
() N
() N
() N
() N
() N
(                                   by) N
() N
(                     Information Sciences Institute) N
(                   University of Southern California) N
(                           4676 Admiralty Way) N
(                   Marina del Rey, California  90291) N
() N
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
border
grestore
end % of iso1dict
pagesave restore
showpage
%%Page: (3-4) 2
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
(September 1981                                                          ) N
(                                           Transmission Control Protocol) N
() N
() N
() N
(                           TABLE OF CONTENTS) N
() N
(    PREFACE ........................................................ iii) N
() N
(1.  INTRODUCTION ..................................................... 1) N
() N
(  1.1  Motivation .................................................... 1) N
(  1.2  Scope ......................................................... 2) N
(  1.3  About This Document ........................................... 2) N
(  1.4  Interfaces .................................................... 3) N
(  1.5  Operation ..................................................... 3) N
() N
(2.  PHILOSOPHY ....................................................... 7) N
() N
(  2.1  Elements of the Internetwork System ........................... 7) N
(  2.2  Model of Operation ............................................ 7) N
(  2.3  The Host Environment .......................................... 8) N
(  2.4  Interfaces .................................................... 9) N
(  2.5  Relation to Other Protocols ................................... 9) N
(  2.6  Reliable Communication ........................................ 9) N
(  2.7  Connection Establishment and Clearing ........................ 10) N
(  2.8  Data Communication ........................................... 12) N
(  2.9  Precedence and Security ...................................... 13) N
(  2.10 Robustness Principle ......................................... 13) N
() N
(3.  FUNCTIONAL SPECIFICATION ........................................ 15) N
() N
(  3.1  Header Format ................................................ 15) N
(  3.2  Terminology .................................................. 19) N
(  3.3  Sequence Numbers ............................................. 24) N
(  3.4  Establishing a connection .................................... 30) N
(  3.5  Closing a Connection ......................................... 37) N
(  3.6  Precedence and Security ...................................... 40) N
(  3.7  Data Communication ........................................... 40) N
(  3.8  Interfaces ................................................... 44) N
(  3.9  Event Processing ............................................. 52) N
() N
(GLOSSARY ............................................................ 79) N
() N
(REFERENCES .......................................................... 85) N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
(                                                                [Page i]) N
() N
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
(                                                          September 1981) N
(Transmission Control Protocol) N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
([Page ii]                                                               ) N
() N
border
grestore
end % of iso1dict
pagesave restore
showpage
%%Page: (5-6) 3
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
(September 1981                                                          ) N
(                                           Transmission Control Protocol) N
() N
() N
() N
(                                PREFACE) N
() N
() N
() N
(This document describes the DoD Standard Transmission Control Protocol) N
(\(TCP\).  There have been nine earlier editions of the ARPA TCP) N
(specification on which this standard is based, and the present text) N
(draws heavily from them.  There have been many contributors to this work) N
(both in terms of concepts and in terms of text.  This edition clarifies) N
(several details and removes the end-of-letter buffer-size adjustments,) N
(and redescribes the letter mechanism as a push function.) N
() N
(                                                           Jon Postel) N
() N
(                                                           Editor) N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
(                                                              [Page iii]) N
() N
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
border
grestore
end % of iso1dict
pagesave restore
showpage
%%Page: (7-8) 4
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
() N
(RFC:  793) N
(Replaces: RFC 761) N
(IENs:  129, 124, 112, 81,) N
(55, 44, 40, 27, 21, 5) N
() N
(                     TRANSMISSION CONTROL PROTOCOL) N
() N
(                         DARPA INTERNET PROGRAM) N
(                         PROTOCOL SPECIFICATION) N
() N
() N
() N
(                            1.  INTRODUCTION) N
() N
(The Transmission Control Protocol \(TCP\) is intended for use as a highly) N
(reliable host-to-host protocol between hosts in packet-switched computer) N
(communication networks, and in interconnected systems of such networks.) N
() N
(This document describes the functions to be performed by the) N
(Transmission Control Protocol, the program that implements it, and its) N
(interface to programs or users that require its services.) N
() N
(1.1.  Motivation) N
() N
(  Computer communication systems are playing an increasingly important) N
(  role in military, government, and civilian environments.  This) N
(  document focuses its attention primarily on military computer) N
(  communication requirements, especially robustness in the presence of) N
(  communication unreliability and availability in the presence of) N
(  congestion, but many of these problems are found in the civilian and) N
(  government sector as well.) N
() N
(  As strategic and tactical computer communication networks are) N
(  developed and deployed, it is essential to provide means of) N
(  interconnecting them and to provide standard interprocess) N
(  communication protocols which can support a broad range of) N
(  applications.  In anticipation of the need for such standards, the) N
(  Deputy Undersecretary of Defense for Research and Engineering has) N
(  declared the Transmission Control Protocol \(TCP\) described herein to) N
(  be a basis for DoD-wide inter-process communication protocol) N
(  standardization.) N
() N
(  TCP is a connection-oriented, end-to-end reliable protocol designed to) N
(  fit into a layered hierarchy of protocols which support multi-network) N
(  applications.  The TCP provides for reliable inter-process) N
(  communication between pairs of processes in host computers attached to) N
(  distinct but interconnected computer communication networks.  Very few) N
(  assumptions are made as to the reliability of the communication) N
(  protocols below the TCP layer.  TCP assumes it can obtain a simple,) N
(  potentially unreliable datagram service from the lower level) N
(  protocols.  In principle, the TCP should be able to operate above a) N
(  wide spectrum of communication systems ranging from hard-wired) N
(  connections to packet-switched or circuit-switched networks.) N
() N
() N
(                                                                [Page 1]) N
() N
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
(                                                          September 1981) N
(Transmission Control Protocol) N
(Introduction) N
() N
() N
() N
(  TCP is based on concepts first described by Cerf and Kahn in [1].  The) N
(  TCP fits into a layered protocol architecture just above a basic) N
(  Internet Protocol [2] which provides a way for the TCP to send and) N
(  receive variable-length segments of information enclosed in internet) N
(  datagram "envelopes".  The internet datagram provides a means for) N
(  addressing source and destination TCPs in different networks.  The) N
(  internet protocol also deals with any fragmentation or reassembly of) N
(  the TCP segments required to achieve transport and delivery through) N
(  multiple networks and interconnecting gateways.  The internet protocol) N
(  also carries information on the precedence, security classification) N
(  and compartmentation of the TCP segments, so this information can be) N
(  communicated end-to-end across multiple networks.) N
() N
(                           Protocol Layering) N
() N
(                        +---------------------+) N
(                        |     higher-level    |) N
(                        +---------------------+) N
(                        |        TCP          |) N
(                        +---------------------+) N
(                        |  internet protocol  |) N
(                        +---------------------+) N
(                        |communication network|) N
(                        +---------------------+) N
() N
(                                Figure 1) N
() N
(  Much of this document is written in the context of TCP implementations) N
(  which are co-resident with higher level protocols in the host) N
(  computer.  Some computer systems will be connected to networks via) N
(  front-end computers which house the TCP and internet protocol layers,) N
(  as well as network specific software.  The TCP specification describes) N
(  an interface to the higher level protocols which appears to be) N
(  implementable even for the front-end case, as long as a suitable) N
(  host-to-front end protocol is implemented.) N
() N
(1.2.  Scope) N
() N
(  The TCP is intended to provide a reliable process-to-process) N
(  communication service in a multinetwork environment.  The TCP is) N
(  intended to be a host-to-host protocol in common use in multiple) N
(  networks.) N
() N
(1.3.  About this Document) N
() N
(  This document represents a specification of the behavior required of) N
(  any TCP implementation, both in its interactions with higher level) N
(  protocols and in its interactions with other TCPs.  The rest of this) N
() N
() N
([Page 2]                                                                ) N
() N
border
grestore
end % of iso1dict
pagesave restore
showpage
%%Page: (9-10) 5
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
(September 1981                                                          ) N
(                                           Transmission Control Protocol) N
(                                                            Introduction) N
() N
() N
() N
(  section offers a very brief view of the protocol interfaces and) N
(  operation.  Section 2 summarizes the philosophical basis for the TCP) N
(  design.  Section 3 offers both a detailed description of the actions) N
(  required of TCP when various events occur \(arrival of new segments,) N
(  user calls, errors, etc.\) and the details of the formats of TCP) N
(  segments.) N
() N
(1.4.  Interfaces) N
() N
(  The TCP interfaces on one side to user or application processes and on) N
(  the other side to a lower level protocol such as Internet Protocol.) N
() N
(  The interface between an application process and the TCP is) N
(  illustrated in reasonable detail.  This interface consists of a set of) N
(  calls much like the calls an operating system provides to an) N
(  application process for manipulating files.  For example, there are) N
(  calls to open and close connections and to send and receive data on) N
(  established connections.  It is also expected that the TCP can) N
(  asynchronously communicate with application programs.  Although) N
(  considerable freedom is permitted to TCP implementors to design) N
(  interfaces which are appropriate to a particular operating system) N
(  environment, a minimum functionality is required at the TCP/user) N
(  interface for any valid implementation.) N
() N
(  The interface between TCP and lower level protocol is essentially) N
(  unspecified except that it is assumed there is a mechanism whereby the) N
(  two levels can asynchronously pass information to each other.) N
(  Typically, one expects the lower level protocol to specify this) N
(  interface.  TCP is designed to work in a very general environment of) N
(  interconnected networks.  The lower level protocol which is assumed) N
(  throughout this document is the Internet Protocol [2].) N
() N
(1.5.  Operation) N
() N
(  As noted above, the primary purpose of the TCP is to provide reliable,) N
(  securable logical circuit or connection service between pairs of) N
(  processes.  To provide this service on top of a less reliable internet) N
(  communication system requires facilities in the following areas:) N
() N
(    Basic Data Transfer) N
(    Reliability) N
(    Flow Control) N
(    Multiplexing) N
(    Connections) N
(    Precedence and Security) N
() N
(  The basic operation of the TCP in each of these areas is described in) N
(  the following paragraphs.) N
() N
() N
(                                                                [Page 3]) N
() N
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
(                                                          September 1981) N
(Transmission Control Protocol) N
(Introduction) N
() N
() N
() N
(  Basic Data Transfer:) N
() N
(    The TCP is able to transfer a continuous stream of octets in each) N
(    direction between its users by packaging some number of octets into) N
(    segments for transmission through the internet system.  In general,) N
(    the TCPs decide when to block and forward data at their own) N
(    convenience.) N
() N
(    Sometimes users need to be sure that all the data they have) N
(    submitted to the TCP has been transmitted.  For this purpose a push) N
(    function is defined.  To assure that data submitted to a TCP is) N
(    actually transmitted the sending user indicates that it should be) N
(    pushed through to the receiving user.  A push causes the TCPs to) N
(    promptly forward and deliver data up to that point to the receiver.) N
(    The exact push point might not be visible to the receiving user and) N
(    the push function does not supply a record boundary marker.) N
() N
(  Reliability:) N
() N
(    The TCP must recover from data that is damaged, lost, duplicated, or) N
(    delivered out of order by the internet communication system.  This) N
(    is achieved by assigning a sequence number to each octet) N
(    transmitted, and requiring a positive acknowledgment \(ACK\) from the) N
(    receiving TCP.  If the ACK is not received within a timeout) N
(    interval, the data is retransmitted.  At the receiver, the sequence) N
(    numbers are used to correctly order segments that may be received) N
(    out of order and to eliminate duplicates.  Damage is handled by) N
(    adding a checksum to each segment transmitted, checking it at the) N
(    receiver, and discarding damaged segments.) N
() N
(    As long as the TCPs continue to function properly and the internet) N
(    system does not become completely partitioned, no transmission) N
(    errors will affect the correct delivery of data.  TCP recovers from) N
(    internet communication system errors.) N
() N
(  Flow Control:) N
() N
(    TCP provides a means for the receiver to govern the amount of data) N
(    sent by the sender.  This is achieved by returning a "window" with) N
(    every ACK indicating a range of acceptable sequence numbers beyond) N
(    the last segment successfully received.  The window indicates an) N
(    allowed number of octets that the sender may transmit before) N
(    receiving further permission.) N
() N
() N
() N
() N
() N
() N
() N
([Page 4]                                                                ) N
() N
border
grestore
end % of iso1dict
pagesave restore
showpage
%%Page: (11-12) 6
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
(September 1981                                                          ) N
(                                           Transmission Control Protocol) N
(                                                            Introduction) N
() N
() N
() N
(  Multiplexing:) N
() N
(    To allow for many processes within a single Host to use TCP) N
(    communication facilities simultaneously, the TCP provides a set of) N
(    addresses or ports within each host.  Concatenated with the network) N
(    and host addresses from the internet communication layer, this forms) N
(    a socket.  A pair of sockets uniquely identifies each connection.) N
(    That is, a socket may be simultaneously used in multiple) N
(    connections.) N
() N
(    The binding of ports to processes is handled independently by each) N
(    Host.  However, it proves useful to attach frequently used processes) N
(    \(e.g., a "logger" or timesharing service\) to fixed sockets which are) N
(    made known to the public.  These services can then be accessed) N
(    through the known addresses.  Establishing and learning the port) N
(    addresses of other processes may involve more dynamic mechanisms.) N
() N
(  Connections:) N
() N
(    The reliability and flow control mechanisms described above require) N
(    that TCPs initialize and maintain certain status information for) N
(    each data stream.  The combination of this information, including) N
(    sockets, sequence numbers, and window sizes, is called a connection.) N
(    Each connection is uniquely specified by a pair of sockets) N
(    identifying its two sides.) N
() N
(    When two processes wish to communicate, their TCP's must first) N
(    establish a connection \(initialize the status information on each) N
(    side\).  When their communication is complete, the connection is) N
(    terminated or closed to free the resources for other uses.) N
() N
(    Since connections must be established between unreliable hosts and) N
(    over the unreliable internet communication system, a handshake) N
(    mechanism with clock-based sequence numbers is used to avoid) N
(    erroneous initialization of connections.) N
() N
(  Precedence and Security:) N
() N
(    The users of TCP may indicate the security and precedence of their) N
(    communication.  Provision is made for default values to be used when) N
(    these features are not needed.) N
() N
(    ) N
() N
() N
() N
() N
() N
() N
() N
(                                                                [Page 5]) N
() N
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
(                                                          September 1981) N
(Transmission Control Protocol) N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
([Page 6]                                                                ) N
() N
border
grestore
end % of iso1dict
pagesave restore
showpage
%%Page: (13-14) 7
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
(September 1981                                                          ) N
(                                           Transmission Control Protocol) N
() N
() N
() N
(                             2.  PHILOSOPHY) N
() N
(2.1.  Elements of the Internetwork System) N
() N
(  The internetwork environment consists of hosts connected to networks) N
(  which are in turn interconnected via gateways.  It is assumed here) N
(  that the networks may be either local networks \(e.g., the ETHERNET\) or) N
(  large networks \(e.g., the ARPANET\), but in any case are based on) N
(  packet switching technology.  The active agents that produce and) N
(  consume messages are processes.  Various levels of protocols in the) N
(  networks, the gateways, and the hosts support an interprocess) N
(  communication system that provides two-way data flow on logical) N
(  connections between process ports.) N
() N
(  The term packet is used generically here to mean the data of one) N
(  transaction between a host and its network.  The format of data blocks) N
(  exchanged within the a network will generally not be of concern to us.) N
() N
(  Hosts are computers attached to a network, and from the communication) N
(  network's point of view, are the sources and destinations of packets.) N
(  Processes are viewed as the active elements in host computers \(in) N
(  accordance with the fairly common definition of a process as a program) N
(  in execution\).  Even terminals and files or other I/O devices are) N
(  viewed as communicating with each other through the use of processes.) N
(  Thus, all communication is viewed as inter-process communication.) N
() N
(  Since a process may need to distinguish among several communication) N
(  streams between itself and another process \(or processes\), we imagine) N
(  that each process may have a number of ports through which it) N
(  communicates with the ports of other processes.) N
() N
(2.2.  Model of Operation) N
() N
(  Processes transmit data by calling on the TCP and passing buffers of) N
(  data as arguments.  The TCP packages the data from these buffers into) N
(  segments and calls on the internet module to transmit each segment to) N
(  the destination TCP.  The receiving TCP places the data from a segment) N
(  into the receiving user's buffer and notifies the receiving user.  The) N
(  TCPs include control information in the segments which they use to) N
(  ensure reliable ordered data transmission.) N
() N
(  The model of internet communication is that there is an internet) N
(  protocol module associated with each TCP which provides an interface) N
(  to the local network.  This internet module packages TCP segments) N
(  inside internet datagrams and routes these datagrams to a destination) N
(  internet module or intermediate gateway.  To transmit the datagram) N
(  through the local network, it is embedded in a local network packet.) N
() N
(  The packet switches may perform further packaging, fragmentation, or) N
() N
() N
(                                                                [Page 7]) N
() N
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
(                                                          September 1981) N
(Transmission Control Protocol) N
(Philosophy) N
() N
() N
() N
(  other operations to achieve the delivery of the local packet to the) N
(  destination internet module.) N
() N
(  At a gateway between networks, the internet datagram is "unwrapped") N
(  from its local packet and examined to determine through which network) N
(  the internet datagram should travel next.  The internet datagram is) N
(  then "wrapped" in a local packet suitable to the next network and) N
(  routed to the next gateway, or to the final destination.) N
() N
(  A gateway is permitted to break up an internet datagram into smaller) N
(  internet datagram fragments if this is necessary for transmission) N
(  through the next network.  To do this, the gateway produces a set of) N
(  internet datagrams; each carrying a fragment.  Fragments may be) N
(  further broken into smaller fragments at subsequent gateways.  The) N
(  internet datagram fragment format is designed so that the destination) N
(  internet module can reassemble fragments into internet datagrams.) N
() N
(  A destination internet module unwraps the segment from the datagram) N
(  \(after reassembling the datagram, if necessary\) and passes it to the) N
(  destination TCP.) N
() N
(  This simple model of the operation glosses over many details.  One) N
(  important feature is the type of service.  This provides information) N
(  to the gateway \(or internet module\) to guide it in selecting the) N
(  service parameters to be used in traversing the next network.) N
(  Included in the type of service information is the precedence of the) N
(  datagram.  Datagrams may also carry security information to permit) N
(  host and gateways that operate in multilevel secure environments to) N
(  properly segregate datagrams for security considerations.) N
() N
(2.3.  The Host Environment) N
() N
(  The TCP is assumed to be a module in an operating system.  The users) N
(  access the TCP much like they would access the file system.  The TCP) N
(  may call on other operating system functions, for example, to manage) N
(  data structures.  The actual interface to the network is assumed to be) N
(  controlled by a device driver module.  The TCP does not call on the) N
(  network device driver directly, but rather calls on the internet) N
(  datagram protocol module which may in turn call on the device driver.) N
() N
(  The mechanisms of TCP do not preclude implementation of the TCP in a) N
(  front-end processor.  However, in such an implementation, a) N
(  host-to-front-end protocol must provide the functionality to support) N
(  the type of TCP-user interface described in this document.) N
() N
() N
() N
() N
() N
() N
([Page 8]                                                                ) N
() N
border
grestore
end % of iso1dict
pagesave restore
showpage
%%Page: (15-16) 8
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
(September 1981                                                          ) N
(                                           Transmission Control Protocol) N
(                                                              Philosophy) N
() N
() N
() N
(2.4.  Interfaces) N
() N
(  The TCP/user interface provides for calls made by the user on the TCP) N
(  to OPEN or CLOSE a connection, to SEND or RECEIVE data, or to obtain) N
(  STATUS about a connection.  These calls are like other calls from user) N
(  programs on the operating system, for example, the calls to open, read) N
(  from, and close a file.) N
() N
(  The TCP/internet interface provides calls to send and receive) N
(  datagrams addressed to TCP modules in hosts anywhere in the internet) N
(  system.  These calls have parameters for passing the address, type of) N
(  service, precedence, security, and other control information.) N
() N
(2.5.  Relation to Other Protocols) N
() N
(  The following diagram illustrates the place of the TCP in the protocol) N
(  hierarchy:) N
() N
(                                    ) N
(       +------+ +-----+ +-----+       +-----+                    ) N
(       |Telnet| | FTP | |Voice|  ...  |     |  Application Level ) N
(       +------+ +-----+ +-----+       +-----+                    ) N
(             |   |         |             |                       ) N
(            +-----+     +-----+       +-----+                    ) N
(            | TCP |     | RTP |  ...  |     |  Host Level        ) N
(            +-----+     +-----+       +-----+                    ) N
(               |           |             |                       ) N
(            +-------------------------------+                    ) N
(            |    Internet Protocol & ICMP   |  Gateway Level     ) N
(            +-------------------------------+                    ) N
(                           |                                     ) N
(              +---------------------------+                      ) N
(              |   Local Network Protocol  |    Network Level     ) N
(              +---------------------------+                      ) N
() N
(                         Protocol Relationships) N
() N
(                               Figure 2.) N
() N
(  It is expected that the TCP will be able to support higher level) N
(  protocols efficiently.  It should be easy to interface higher level) N
(  protocols like the ARPANET Telnet or AUTODIN II THP to the TCP.) N
() N
(2.6.  Reliable Communication) N
() N
(  A stream of data sent on a TCP connection is delivered reliably and in) N
(  order at the destination.) N
() N
() N
() N
(                                                                [Page 9]) N
() N
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
(                                                          September 1981) N
(Transmission Control Protocol) N
(Philosophy) N
() N
() N
() N
(  Transmission is made reliable via the use of sequence numbers and) N
(  acknowledgments.  Conceptually, each octet of data is assigned a) N
(  sequence number.  The sequence number of the first octet of data in a) N
(  segment is transmitted with that segment and is called the segment) N
(  sequence number.  Segments also carry an acknowledgment number which) N
(  is the sequence number of the next expected data octet of) N
(  transmissions in the reverse direction.  When the TCP transmits a) N
(  segment containing data, it puts a copy on a retransmission queue and) N
(  starts a timer; when the acknowledgment for that data is received, the) N
(  segment is deleted from the queue.  If the acknowledgment is not) N
(  received before the timer runs out, the segment is retransmitted.) N
() N
(  An acknowledgment by TCP does not guarantee that the data has been) N
(  delivered to the end user, but only that the receiving TCP has taken) N
(  the responsibility to do so.) N
() N
(  To govern the flow of data between TCPs, a flow control mechanism is) N
(  employed.  The receiving TCP reports a "window" to the sending TCP.) N
(  This window specifies the number of octets, starting with the) N
(  acknowledgment number, that the receiving TCP is currently prepared to) N
(  receive.) N
() N
(2.7.  Connection Establishment and Clearing) N
() N
(  To identify the separate data streams that a TCP may handle, the TCP) N
(  provides a port identifier.  Since port identifiers are selected) N
(  independently by each TCP they might not be unique.  To provide for) N
(  unique addresses within each TCP, we concatenate an internet address) N
(  identifying the TCP with a port identifier to create a socket which) N
(  will be unique throughout all networks connected together.) N
() N
(  A connection is fully specified by the pair of sockets at the ends.  A) N
(  local socket may participate in many connections to different foreign) N
(  sockets.  A connection can be used to carry data in both directions,) N
(  that is, it is "full duplex".) N
() N
(  TCPs are free to associate ports with processes however they choose.) N
(  However, several basic concepts are necessary in any implementation.) N
(  There must be well-known sockets which the TCP associates only with) N
(  the "appropriate" processes by some means.  We envision that processes) N
(  may "own" ports, and that processes can initiate connections only on) N
(  the ports they own.  \(Means for implementing ownership is a local) N
(  issue, but we envision a Request Port user command, or a method of) N
(  uniquely allocating a group of ports to a given process, e.g., by) N
(  associating the high order bits of a port name with a given process.\)) N
() N
(  A connection is specified in the OPEN call by the local port and) N
(  foreign socket arguments.  In return, the TCP supplies a \(short\) local) N
() N
() N
([Page 10]                                                               ) N
() N
border
grestore
end % of iso1dict
pagesave restore
showpage
%%Page: (17-18) 9
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
(September 1981                                                          ) N
(                                           Transmission Control Protocol) N
(                                                              Philosophy) N
() N
() N
() N
(  connection name by which the user refers to the connection in) N
(  subsequent calls.  There are several things that must be remembered) N
(  about a connection.  To store this information we imagine that there) N
(  is a data structure called a Transmission Control Block \(TCB\).  One) N
(  implementation strategy would have the local connection name be a) N
(  pointer to the TCB for this connection.  The OPEN call also specifies) N
(  whether the connection establishment is to be actively pursued, or to) N
(  be passively waited for.) N
() N
(  A passive OPEN request means that the process wants to accept incoming) N
(  connection requests rather than attempting to initiate a connection.) N
(  Often the process requesting a passive OPEN will accept a connection) N
(  request from any caller.  In this case a foreign socket of all zeros) N
(  is used to denote an unspecified socket.  Unspecified foreign sockets) N
(  are allowed only on passive OPENs.) N
() N
(  A service process that wished to provide services for unknown other) N
(  processes would issue a passive OPEN request with an unspecified) N
(  foreign socket.  Then a connection could be made with any process that) N
(  requested a connection to this local socket.  It would help if this) N
(  local socket were known to be associated with this service.) N
() N
(  Well-known sockets are a convenient mechanism for a priori associating) N
(  a socket address with a standard service.  For instance, the) N
(  "Telnet-Server" process is permanently assigned to a particular) N
(  socket, and other sockets are reserved for File Transfer, Remote Job) N
(  Entry, Text Generator, Echoer, and Sink processes \(the last three) N
(  being for test purposes\).  A socket address might be reserved for) N
(  access to a "Look-Up" service which would return the specific socket) N
(  at which a newly created service would be provided.  The concept of a) N
(  well-known socket is part of the TCP specification, but the assignment) N
(  of sockets to services is outside this specification.  \(See [4].\)) N
() N
(  Processes can issue passive OPENs and wait for matching active OPENs) N
(  from other processes and be informed by the TCP when connections have) N
(  been established.  Two processes which issue active OPENs to each) N
(  other at the same time will be correctly connected.  This flexibility) N
(  is critical for the support of distributed computing in which) N
(  components act asynchronously with respect to each other.) N
() N
(  There are two principal cases for matching the sockets in the local) N
(  passive OPENs and an foreign active OPENs.  In the first case, the) N
(  local passive OPENs has fully specified the foreign socket.  In this) N
(  case, the match must be exact.  In the second case, the local passive) N
(  OPENs has left the foreign socket unspecified.  In this case, any) N
(  foreign socket is acceptable as long as the local sockets match.) N
(  Other possibilities include partially restricted matches.) N
() N
() N
() N
(                                                               [Page 11]) N
() N
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
(                                                          September 1981) N
(Transmission Control Protocol) N
(Philosophy) N
() N
() N
() N
(  If there are several pending passive OPENs \(recorded in TCBs\) with the) N
(  same local socket, an foreign active OPEN will be matched to a TCB) N
(  with the specific foreign socket in the foreign active OPEN, if such a) N
(  TCB exists, before selecting a TCB with an unspecified foreign socket.) N
() N
(  The procedures to establish connections utilize the synchronize \(SYN\)) N
(  control flag and involves an exchange of three messages.  This) N
(  exchange has been termed a three-way hand shake [3].) N
() N
(  A connection is initiated by the rendezvous of an arriving segment) N
(  containing a SYN and a waiting TCB entry each created by a user OPEN) N
(  command.  The matching of local and foreign sockets determines when a) N
(  connection has been initiated.  The connection becomes "established") N
(  when sequence numbers have been synchronized in both directions.) N
() N
(  The clearing of a connection also involves the exchange of segments,) N
(  in this case carrying the FIN control flag.) N
() N
(2.8.  Data Communication) N
() N
(  The data that flows on a connection may be thought of as a stream of) N
(  octets.  The sending user indicates in each SEND call whether the data) N
(  in that call \(and any preceeding calls\) should be immediately pushed) N
(  through to the receiving user by the setting of the PUSH flag.) N
() N
(  A sending TCP is allowed to collect data from the sending user and to) N
(  send that data in segments at its own convenience, until the push) N
(  function is signaled, then it must send all unsent data.  When a) N
(  receiving TCP sees the PUSH flag, it must not wait for more data from) N
(  the sending TCP before passing the data to the receiving process.) N
() N
(  There is no necessary relationship between push functions and segment) N
(  boundaries.  The data in any particular segment may be the result of a) N
(  single SEND call, in whole or part, or of multiple SEND calls.) N
() N
(  The purpose of push function and the PUSH flag is to push data through) N
(  from the sending user to the receiving user.  It does not provide a) N
(  record service.) N
() N
(  There is a coupling between the push function and the use of buffers) N
(  of data that cross the TCP/user interface.  Each time a PUSH flag is) N
(  associated with data placed into the receiving user's buffer, the) N
(  buffer is returned to the user for processing even if the buffer is) N
(  not filled.  If data arrives that fills the user's buffer before a) N
(  PUSH is seen, the data is passed to the user in buffer size units.) N
() N
(  TCP also provides a means to communicate to the receiver of data that) N
(  at some point further along in the data stream than the receiver is) N
() N
() N
([Page 12]                                                               ) N
() N
border
grestore
end % of iso1dict
pagesave restore
showpage
%%Page: (19-20) 10
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
(September 1981                                                          ) N
(                                           Transmission Control Protocol) N
(                                                              Philosophy) N
() N
() N
() N
(  currently reading there is urgent data.  TCP does not attempt to) N
(  define what the user specifically does upon being notified of pending) N
(  urgent data, but the general notion is that the receiving process will) N
(  take action to process the urgent data quickly.) N
() N
(2.9.  Precedence and Security) N
() N
(  The TCP makes use of the internet protocol type of service field and) N
(  security option to provide precedence and security on a per connection) N
(  basis to TCP users.  Not all TCP modules will necessarily function in) N
(  a multilevel secure environment; some may be limited to unclassified) N
(  use only, and others may operate at only one security level and) N
(  compartment.  Consequently, some TCP implementations and services to) N
(  users may be limited to a subset of the multilevel secure case.) N
() N
(  TCP modules which operate in a multilevel secure environment must) N
(  properly mark outgoing segments with the security, compartment, and) N
(  precedence.  Such TCP modules must also provide to their users or) N
(  higher level protocols such as Telnet or THP an interface to allow) N
(  them to specify the desired security level, compartment, and) N
(  precedence of connections.) N
() N
(2.10.  Robustness Principle) N
() N
(  TCP implementations will follow a general principle of robustness:  be) N
(  conservative in what you do, be liberal in what you accept from) N
(  others.) N
() N
(  ) N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
(                                                               [Page 13]) N
() N
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
(                                                          September 1981) N
(Transmission Control Protocol) N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
([Page 14]                                                               ) N
() N
border
grestore
end % of iso1dict
pagesave restore
showpage
%%Page: (21-22) 11
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
(September 1981                                                          ) N
(                                           Transmission Control Protocol) N
() N
() N
() N
(                      3.  FUNCTIONAL SPECIFICATION) N
() N
(3.1.  Header Format) N
() N
(  TCP segments are sent as internet datagrams.  The Internet Protocol) N
(  header carries several information fields, including the source and) N
(  destination host addresses [2].  A TCP header follows the internet) N
(  header, supplying information specific to the TCP protocol.  This) N
(  division allows for the existence of host level protocols other than) N
(  TCP.) N
() N
(  TCP Header Format) N
() N
(                                    ) N
(    0                   1                   2                   3   ) N
(    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 ) N
(   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+) N
(   |          Source Port          |       Destination Port        |) N
(   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+) N
(   |                        Sequence Number                        |) N
(   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+) N
(   |                    Acknowledgment Number                      |) N
(   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+) N
(   |  Data |           |U|A|P|R|S|F|                               |) N
(   | Offset| Reserved  |R|C|S|S|Y|I|            Window             |) N
(   |       |           |G|K|H|T|N|N|                               |) N
(   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+) N
(   |           Checksum            |         Urgent Pointer        |) N
(   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+) N
(   |                    Options                    |    Padding    |) N
(   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+) N
(   |                             data                              |) N
(   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+) N
() N
(                            TCP Header Format) N
() N
(          Note that one tick mark represents one bit position.) N
() N
(                               Figure 3.) N
() N
(  Source Port:  16 bits) N
() N
(    The source port number.) N
() N
(  Destination Port:  16 bits) N
() N
(    The destination port number.) N
() N
() N
() N
() N
(                                                               [Page 15]) N
() N
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
(                                                          September 1981) N
(Transmission Control Protocol) N
(Functional Specification) N
() N
() N
() N
(  Sequence Number:  32 bits) N
() N
(    The sequence number of the first data octet in this segment \(except) N
(    when SYN is present\). If SYN is present the sequence number is the) N
(    initial sequence number \(ISN\) and the first data octet is ISN+1.) N
() N
(  Acknowledgment Number:  32 bits) N
() N
(    If the ACK control bit is set this field contains the value of the) N
(    next sequence number the sender of the segment is expecting to) N
(    receive.  Once a connection is established this is always sent.) N
() N
(  Data Offset:  4 bits) N
() N
(    The number of 32 bit words in the TCP Header.  This indicates where) N
(    the data begins.  The TCP header \(even one including options\) is an) N
(    integral number of 32 bits long.) N
() N
(  Reserved:  6 bits) N
() N
(    Reserved for future use.  Must be zero.) N
() N
(  Control Bits:  6 bits \(from left to right\):) N
() N
(    URG:  Urgent Pointer field significant) N
(    ACK:  Acknowledgment field significant) N
(    PSH:  Push Function) N
(    RST:  Reset the connection) N
(    SYN:  Synchronize sequence numbers) N
(    FIN:  No more data from sender) N
() N
(  Window:  16 bits) N
() N
(    The number of data octets beginning with the one indicated in the) N
(    acknowledgment field which the sender of this segment is willing to) N
(    accept.) N
() N
(  Checksum:  16 bits) N
() N
(    The checksum field is the 16 bit one's complement of the one's) N
(    complement sum of all 16 bit words in the header and text.  If a) N
(    segment contains an odd number of header and text octets to be) N
(    checksummed, the last octet is padded on the right with zeros to) N
(    form a 16 bit word for checksum purposes.  The pad is not) N
(    transmitted as part of the segment.  While computing the checksum,) N
(    the checksum field itself is replaced with zeros.) N
() N
(    The checksum also covers a 96 bit pseudo header conceptually) N
() N
() N
([Page 16]                                                               ) N
() N
border
grestore
end % of iso1dict
pagesave restore
showpage
%%Page: (23-24) 12
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
(September 1981                                                          ) N
(                                           Transmission Control Protocol) N
(                                                Functional Specification) N
() N
() N
() N
(    prefixed to the TCP header.  This pseudo header contains the Source) N
(    Address, the Destination Address, the Protocol, and TCP length.) N
(    This gives the TCP protection against misrouted segments.  This) N
(    information is carried in the Internet Protocol and is transferred) N
(    across the TCP/Network interface in the arguments or results of) N
(    calls by the TCP on the IP.) N
() N
(                     +--------+--------+--------+--------+) N
(                     |           Source Address          |) N
(                     +--------+--------+--------+--------+) N
(                     |         Destination Address       |) N
(                     +--------+--------+--------+--------+) N
(                     |  zero  |  PTCL  |    TCP Length   |) N
(                     +--------+--------+--------+--------+) N
() N
(      The TCP Length is the TCP header length plus the data length in) N
(      octets \(this is not an explicitly transmitted quantity, but is) N
(      computed\), and it does not count the 12 octets of the pseudo) N
(      header.) N
() N
(  Urgent Pointer:  16 bits) N
() N
(    This field communicates the current value of the urgent pointer as a) N
(    positive offset from the sequence number in this segment.  The) N
(    urgent pointer points to the sequence number of the octet following) N
(    the urgent data.  This field is only be interpreted in segments with) N
(    the URG control bit set.) N
() N
(  Options:  variable) N
() N
(    Options may occupy space at the end of the TCP header and are a) N
(    multiple of 8 bits in length.  All options are included in the) N
(    checksum.  An option may begin on any octet boundary.  There are two) N
(    cases for the format of an option:) N
() N
(      Case 1:  A single octet of option-kind.) N
() N
(      Case 2:  An octet of option-kind, an octet of option-length, and) N
(               the actual option-data octets.) N
() N
(    The option-length counts the two octets of option-kind and) N
(    option-length as well as the option-data octets.) N
() N
(    Note that the list of options may be shorter than the data offset) N
(    field might imply.  The content of the header beyond the) N
(    End-of-Option option must be header padding \(i.e., zero\).) N
() N
(    A TCP must implement all options.) N
() N
() N
(                                                               [Page 17]) N
() N
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
(                                                          September 1981) N
(Transmission Control Protocol) N
(Functional Specification) N
() N
() N
() N
(    Currently defined options include \(kind indicated in octal\):) N
() N
(      Kind     Length    Meaning) N
(      ----     ------    -------) N
(       0         -       End of option list.) N
(       1         -       No-Operation.) N
(       2         4       Maximum Segment Size.) N
(      ) N
() N
(    Specific Option Definitions) N
() N
(      End of Option List) N
() N
(        +--------+) N
(        |00000000|) N
(        +--------+) N
(         Kind=0) N
() N
(        This option code indicates the end of the option list.  This) N
(        might not coincide with the end of the TCP header according to) N
(        the Data Offset field.  This is used at the end of all options,) N
(        not the end of each option, and need only be used if the end of) N
(        the options would not otherwise coincide with the end of the TCP) N
(        header.) N
() N
(      No-Operation) N
() N
(        +--------+) N
(        |00000001|) N
(        +--------+) N
(         Kind=1) N
() N
(        This option code may be used between options, for example, to) N
(        align the beginning of a subsequent option on a word boundary.) N
(        There is no guarantee that senders will use this option, so) N
(        receivers must be prepared to process options even if they do) N
(        not begin on a word boundary.) N
() N
(      Maximum Segment Size) N
() N
(        +--------+--------+---------+--------+) N
(        |00000010|00000100|   max seg size   |) N
(        +--------+--------+---------+--------+) N
(         Kind=2   Length=4) N
() N
() N
() N
() N
() N
() N
([Page 18]                                                               ) N
() N
border
grestore
end % of iso1dict
pagesave restore
showpage
%%Page: (25-26) 13
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
(September 1981                                                          ) N
(                                           Transmission Control Protocol) N
(                                                Functional Specification) N
() N
() N
() N
(        Maximum Segment Size Option Data:  16 bits) N
() N
(          If this option is present, then it communicates the maximum) N
(          receive segment size at the TCP which sends this segment.) N
(          This field must only be sent in the initial connection request) N
(          \(i.e., in segments with the SYN control bit set\).  If this) N
(          option is not used, any segment size is allowed.) N
() N
(  Padding:  variable) N
() N
(    The TCP header padding is used to ensure that the TCP header ends) N
(    and data begins on a 32 bit boundary.  The padding is composed of) N
(    zeros.) N
() N
(3.2.  Terminology) N
() N
(  Before we can discuss very much about the operation of the TCP we need) N
(  to introduce some detailed terminology.  The maintenance of a TCP) N
(  connection requires the remembering of several variables.  We conceive) N
(  of these variables being stored in a connection record called a) N
(  Transmission Control Block or TCB.  Among the variables stored in the) N
(  TCB are the local and remote socket numbers, the security and) N
(  precedence of the connection, pointers to the user's send and receive) N
(  buffers, pointers to the retransmit queue and to the current segment.) N
(  In addition several variables relating to the send and receive) N
(  sequence numbers are stored in the TCB.) N
() N
(    Send Sequence Variables) N
() N
(      SND.UNA - send unacknowledged) N
(      SND.NXT - send next) N
(      SND.WND - send window) N
(      SND.UP  - send urgent pointer) N
(      SND.WL1 - segment sequence number used for last window update) N
(      SND.WL2 - segment acknowledgment number used for last window) N
(                update) N
(      ISS     - initial send sequence number) N
() N
(    Receive Sequence Variables) N
() N
(      RCV.NXT - receive next) N
(      RCV.WND - receive window) N
(      RCV.UP  - receive urgent pointer) N
(      IRS     - initial receive sequence number) N
() N
() N
() N
() N
() N
() N
(                                                               [Page 19]) N
() N
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
(                                                          September 1981) N
(Transmission Control Protocol) N
(Functional Specification) N
() N
() N
() N
(  The following diagrams may help to relate some of these variables to) N
(  the sequence space.) N
() N
(  Send Sequence Space) N
() N
(                   1         2          3          4      ) N
(              ----------|----------|----------|---------- ) N
(                     SND.UNA    SND.NXT    SND.UNA        ) N
(                                          +SND.WND        ) N
() N
(        1 - old sequence numbers which have been acknowledged  ) N
(        2 - sequence numbers of unacknowledged data            ) N
(        3 - sequence numbers allowed for new data transmission ) N
(        4 - future sequence numbers which are not yet allowed  ) N
() N
(                          Send Sequence Space) N
() N
(                               Figure 4.) N
(    ) N
(    ) N
() N
(  The send window is the portion of the sequence space labeled 3 in) N
(  figure 4.) N
() N
(  Receive Sequence Space) N
() N
(                       1          2          3      ) N
(                   ----------|----------|---------- ) N
(                          RCV.NXT    RCV.NXT        ) N
(                                    +RCV.WND        ) N
() N
(        1 - old sequence numbers which have been acknowledged  ) N
(        2 - sequence numbers allowed for new reception         ) N
(        3 - future sequence numbers which are not yet allowed  ) N
() N
(                         Receive Sequence Space) N
() N
(                               Figure 5.) N
(    ) N
(    ) N
() N
(  The receive window is the portion of the sequence space labeled 2 in) N
(  figure 5.) N
() N
(  There are also some variables used frequently in the discussion that) N
(  take their values from the fields of the current segment.) N
() N
() N
() N
() N
([Page 20]                                                               ) N
() N
border
grestore
end % of iso1dict
pagesave restore
showpage
%%Page: (27-28) 14
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
(September 1981                                                          ) N
(                                           Transmission Control Protocol) N
(                                                Functional Specification) N
() N
() N
() N
(    Current Segment Variables) N
() N
(      SEG.SEQ - segment sequence number) N
(      SEG.ACK - segment acknowledgment number) N
(      SEG.LEN - segment length) N
(      SEG.WND - segment window) N
(      SEG.UP  - segment urgent pointer) N
(      SEG.PRC - segment precedence value) N
() N
(  A connection progresses through a series of states during its) N
(  lifetime.  The states are:  LISTEN, SYN-SENT, SYN-RECEIVED,) N
(  ESTABLISHED, FIN-WAIT-1, FIN-WAIT-2, CLOSE-WAIT, CLOSING, LAST-ACK,) N
(  TIME-WAIT, and the fictional state CLOSED.  CLOSED is fictional) N
(  because it represents the state when there is no TCB, and therefore,) N
(  no connection.  Briefly the meanings of the states are:) N
() N
(    LISTEN - represents waiting for a connection request from any remote) N
(    TCP and port.) N
() N
(    SYN-SENT - represents waiting for a matching connection request) N
(    after having sent a connection request.) N
() N
(    SYN-RECEIVED - represents waiting for a confirming connection) N
(    request acknowledgment after having both received and sent a) N
(    connection request.) N
() N
(    ESTABLISHED - represents an open connection, data received can be) N
(    delivered to the user.  The normal state for the data transfer phase) N
(    of the connection.) N
() N
(    FIN-WAIT-1 - represents waiting for a connection termination request) N
(    from the remote TCP, or an acknowledgment of the connection) N
(    termination request previously sent.) N
() N
(    FIN-WAIT-2 - represents waiting for a connection termination request) N
(    from the remote TCP.) N
() N
(    CLOSE-WAIT - represents waiting for a connection termination request) N
(    from the local user.) N
() N
(    CLOSING - represents waiting for a connection termination request) N
(    acknowledgment from the remote TCP.) N
() N
(    LAST-ACK - represents waiting for an acknowledgment of the) N
(    connection termination request previously sent to the remote TCP) N
(    \(which includes an acknowledgment of its connection termination) N
(    request\).) N
() N
() N
() N
(                                                               [Page 21]) N
() N
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
(                                                          September 1981) N
(Transmission Control Protocol) N
(Functional Specification) N
() N
() N
() N
(    TIME-WAIT - represents waiting for enough time to pass to be sure) N
(    the remote TCP received the acknowledgment of its connection) N
(    termination request.) N
() N
(    CLOSED - represents no connection state at all.) N
() N
(  A TCP connection progresses from one state to another in response to) N
(  events.  The events are the user calls, OPEN, SEND, RECEIVE, CLOSE,) N
(  ABORT, and STATUS; the incoming segments, particularly those) N
(  containing the SYN, ACK, RST and FIN flags; and timeouts.) N
() N
(  The state diagram in figure 6 illustrates only state changes, together) N
(  with the causing events and resulting actions, but addresses neither) N
(  error conditions nor actions which are not connected with state) N
(  changes.  In a later section, more detail is offered with respect to) N
(  the reaction of the TCP to events.) N
() N
(  NOTE BENE:  this diagram is only a summary and must not be taken as) N
(  the total specification.) N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
([Page 22]                                                               ) N
() N
border
grestore
end % of iso1dict
pagesave restore
showpage
%%Page: (29-30) 15
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
(September 1981                                                          ) N
(                                           Transmission Control Protocol) N
(                                                Functional Specification) N
() N
() N
() N
(                                    ) N
(                              +---------+ ---------\\      active OPEN  ) N
(                              |  CLOSED |            \\    -----------  ) N
(                              +---------+<---------\\   \\   create TCB  ) N
(                                |     ^              \\   \\  snd SYN    ) N
(                   passive OPEN |     |   CLOSE        \\   \\           ) N
(                   ------------ |     | ----------       \\   \\         ) N
(                    create TCB  |     | delete TCB         \\   \\       ) N
(                                V     |                      \\   \\     ) N
(                              +---------+            CLOSE    |    \\   ) N
(                              |  LISTEN |          ---------- |     |  ) N
(                              +---------+          delete TCB |     |  ) N
(                   rcv SYN      |     |     SEND              |     |  ) N
(                  -----------   |     |    -------            |     V  ) N
( +---------+      snd SYN,ACK  /       \\   snd SYN          +---------+) N
( |         |<-----------------           ------------------>|         |) N
( |   SYN   |                    rcv SYN                     |   SYN   |) N
( |   RCVD  |<-----------------------------------------------|   SENT  |) N
( |         |                    snd ACK                     |         |) N
( |         |------------------           -------------------|         |) N
( +---------+   rcv ACK of SYN  \\       /  rcv SYN,ACK       +---------+) N
(   |           --------------   |     |   -----------                  ) N
(   |                  x         |     |     snd ACK                    ) N
(   |                            V     V                                ) N
(   |  CLOSE                   +---------+                              ) N
(   | -------                  |  ESTAB  |                              ) N
(   | snd FIN                  +---------+                              ) N
(   |                   CLOSE    |     |    rcv FIN                     ) N
(   V                  -------   |     |    -------                     ) N
( +---------+          snd FIN  /       \\   snd ACK          +---------+) N
( |  FIN    |<-----------------           ------------------>|  CLOSE  |) N
( | WAIT-1  |------------------                              |   WAIT  |) N
( +---------+          rcv FIN  \\                            +---------+) N
(   | rcv ACK of FIN   -------   |                            CLOSE  |  ) N
(   | --------------   snd ACK   |                           ------- |  ) N
(   V        x                   V                           snd FIN V  ) N
( +---------+                  +---------+                   +---------+) N
( |FINWAIT-2|                  | CLOSING |                   | LAST-ACK|) N
( +---------+                  +---------+                   +---------+) N
(   |                rcv ACK of FIN |                 rcv ACK of FIN |  ) N
(   |  rcv FIN       -------------- |    Timeout=2MSL -------------- |  ) N
(   |  -------              x       V    ------------        x       V  ) N
(    \\ snd ACK                 +---------+delete TCB         +---------+) N
(     ------------------------>|TIME WAIT|------------------>| CLOSED  |) N
(                              +---------+                   +---------+) N
() N
(                      TCP Connection State Diagram) N
(                               Figure 6.) N
() N
() N
(                                                               [Page 23]) N
() N
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
(                                                          September 1981) N
(Transmission Control Protocol) N
(Functional Specification) N
() N
() N
() N
(3.3.  Sequence Numbers) N
() N
(  A fundamental notion in the design is that every octet of data sent) N
(  over a TCP connection has a sequence number.  Since every octet is) N
(  sequenced, each of them can be acknowledged.  The acknowledgment) N
(  mechanism employed is cumulative so that an acknowledgment of sequence) N
(  number X indicates that all octets up to but not including X have been) N
(  received.  This mechanism allows for straight-forward duplicate) N
(  detection in the presence of retransmission.  Numbering of octets) N
(  within a segment is that the first data octet immediately following) N
(  the header is the lowest numbered, and the following octets are) N
(  numbered consecutively.) N
() N
(  It is essential to remember that the actual sequence number space is) N
(  finite, though very large.  This space ranges from 0 to 2**32 - 1.) N
(  Since the space is finite, all arithmetic dealing with sequence) N
(  numbers must be performed modulo 2**32.  This unsigned arithmetic) N
(  preserves the relationship of sequence numbers as they cycle from) N
(  2**32 - 1 to 0 again.  There are some subtleties to computer modulo) N
(  arithmetic, so great care should be taken in programming the) N
(  comparison of such values.  The symbol "=<" means "less than or equal") N
(  \(modulo 2**32\).) N
() N
(  The typical kinds of sequence number comparisons which the TCP must) N
(  perform include:) N
() N
(    \(a\)  Determining that an acknowledgment refers to some sequence) N
(         number sent but not yet acknowledged.) N
() N
(    \(b\)  Determining that all sequence numbers occupied by a segment) N
(         have been acknowledged \(e.g., to remove the segment from a) N
(         retransmission queue\).) N
() N
(    \(c\)  Determining that an incoming segment contains sequence numbers) N
(         which are expected \(i.e., that the segment "overlaps" the) N
(         receive window\).) N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
([Page 24]                                                               ) N
() N
border
grestore
end % of iso1dict
pagesave restore
showpage
%%Page: (31-32) 16
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
(September 1981                                                          ) N
(                                           Transmission Control Protocol) N
(                                                Functional Specification) N
() N
() N
() N
(  In response to sending data the TCP will receive acknowledgments.  The) N
(  following comparisons are needed to process the acknowledgments.) N
() N
(    SND.UNA = oldest unacknowledged sequence number) N
() N
(    SND.NXT = next sequence number to be sent) N
() N
(    SEG.ACK = acknowledgment from the receiving TCP \(next sequence) N
(              number expected by the receiving TCP\)) N
() N
(    SEG.SEQ = first sequence number of a segment) N
() N
(    SEG.LEN = the number of octets occupied by the data in the segment) N
(              \(counting SYN and FIN\)) N
() N
(    SEG.SEQ+SEG.LEN-1 = last sequence number of a segment) N
() N
(  A new acknowledgment \(called an "acceptable ack"\), is one for which) N
(  the inequality below holds:) N
() N
(    SND.UNA < SEG.ACK =< SND.NXT) N
() N
(  A segment on the retransmission queue is fully acknowledged if the sum) N
(  of its sequence number and length is less or equal than the) N
(  acknowledgment value in the incoming segment.) N
() N
(  When data is received the following comparisons are needed:) N
() N
(    RCV.NXT = next sequence number expected on an incoming segments, and) N
(        is the left or lower edge of the receive window) N
() N
(    RCV.NXT+RCV.WND-1 = last sequence number expected on an incoming) N
(        segment, and is the right or upper edge of the receive window) N
() N
(    SEG.SEQ = first sequence number occupied by the incoming segment) N
() N
(    SEG.SEQ+SEG.LEN-1 = last sequence number occupied by the incoming) N
(        segment) N
() N
(  A segment is judged to occupy a portion of valid receive sequence) N
(  space if) N
() N
(    RCV.NXT =< SEG.SEQ < RCV.NXT+RCV.WND) N
() N
(  or) N
() N
(    RCV.NXT =< SEG.SEQ+SEG.LEN-1 < RCV.NXT+RCV.WND) N
() N
() N
() N
(                                                               [Page 25]) N
() N
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
(                                                          September 1981) N
(Transmission Control Protocol) N
(Functional Specification) N
() N
() N
() N
(  The first part of this test checks to see if the beginning of the) N
(  segment falls in the window, the second part of the test checks to see) N
(  if the end of the segment falls in the window; if the segment passes) N
(  either part of the test it contains data in the window.) N
() N
(  Actually, it is a little more complicated than this.  Due to zero) N
(  windows and zero length segments, we have four cases for the) N
(  acceptability of an incoming segment:) N
() N
(    Segment Receive  Test) N
(    Length  Window) N
(    ------- -------  -------------------------------------------) N
() N
(       0       0     SEG.SEQ = RCV.NXT) N
() N
(       0      >0     RCV.NXT =< SEG.SEQ < RCV.NXT+RCV.WND) N
() N
(      >0       0     not acceptable) N
() N
(      >0      >0     RCV.NXT =< SEG.SEQ < RCV.NXT+RCV.WND) N
(                  or RCV.NXT =< SEG.SEQ+SEG.LEN-1 < RCV.NXT+RCV.WND) N
() N
(  Note that when the receive window is zero no segments should be) N
(  acceptable except ACK segments.  Thus, it is be possible for a TCP to) N
(  maintain a zero receive window while transmitting data and receiving) N
(  ACKs.  However, even when the receive window is zero, a TCP must) N
(  process the RST and URG fields of all incoming segments.) N
() N
(  We have taken advantage of the numbering scheme to protect certain) N
(  control information as well.  This is achieved by implicitly including) N
(  some control flags in the sequence space so they can be retransmitted) N
(  and acknowledged without confusion \(i.e., one and only one copy of the) N
(  control will be acted upon\).  Control information is not physically) N
(  carried in the segment data space.  Consequently, we must adopt rules) N
(  for implicitly assigning sequence numbers to control.  The SYN and FIN) N
(  are the only controls requiring this protection, and these controls) N
(  are used only at connection opening and closing.  For sequence number) N
(  purposes, the SYN is considered to occur before the first actual data) N
(  octet of the segment in which it occurs, while the FIN is considered) N
(  to occur after the last actual data octet in a segment in which it) N
(  occurs.  The segment length \(SEG.LEN\) includes both data and sequence) N
(  space occupying controls.  When a SYN is present then SEG.SEQ is the) N
(  sequence number of the SYN.) N
() N
() N
() N
() N
() N
() N
() N
([Page 26]                                                               ) N
() N
border
grestore
end % of iso1dict
pagesave restore
showpage
%%Page: (33-34) 17
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
(September 1981                                                          ) N
(                                           Transmission Control Protocol) N
(                                                Functional Specification) N
() N
() N
() N
(  Initial Sequence Number Selection) N
() N
(  The protocol places no restriction on a particular connection being) N
(  used over and over again.  A connection is defined by a pair of) N
(  sockets.  New instances of a connection will be referred to as) N
(  incarnations of the connection.  The problem that arises from this is) N
(  -- "how does the TCP identify duplicate segments from previous) N
(  incarnations of the connection?"  This problem becomes apparent if the) N
(  connection is being opened and closed in quick succession, or if the) N
(  connection breaks with loss of memory and is then reestablished.) N
() N
(  To avoid confusion we must prevent segments from one incarnation of a) N
(  connection from being used while the same sequence numbers may still) N
(  be present in the network from an earlier incarnation.  We want to) N
(  assure this, even if a TCP crashes and loses all knowledge of the) N
(  sequence numbers it has been using.  When new connections are created,) N
(  an initial sequence number \(ISN\) generator is employed which selects a) N
(  new 32 bit ISN.  The generator is bound to a \(possibly fictitious\) 32) N
(  bit clock whose low order bit is incremented roughly every 4) N
(  microseconds.  Thus, the ISN cycles approximately every 4.55 hours.) N
(  Since we assume that segments will stay in the network no more than) N
(  the Maximum Segment Lifetime \(MSL\) and that the MSL is less than 4.55) N
(  hours we can reasonably assume that ISN's will be unique.) N
() N
(  For each connection there is a send sequence number and a receive) N
(  sequence number.  The initial send sequence number \(ISS\) is chosen by) N
(  the data sending TCP, and the initial receive sequence number \(IRS\) is) N
(  learned during the connection establishing procedure.) N
() N
(  For a connection to be established or initialized, the two TCPs must) N
(  synchronize on each other's initial sequence numbers.  This is done in) N
(  an exchange of connection establishing segments carrying a control bit) N
(  called "SYN" \(for synchronize\) and the initial sequence numbers.  As a) N
(  shorthand, segments carrying the SYN bit are also called "SYNs".) N
(  Hence, the solution requires a suitable mechanism for picking an) N
(  initial sequence number and a slightly involved handshake to exchange) N
(  the ISN's.) N
() N
(  The synchronization requires each side to send it's own initial) N
(  sequence number and to receive a confirmation of it in acknowledgment) N
(  from the other side.  Each side must also receive the other side's) N
(  initial sequence number and send a confirming acknowledgment.) N
() N
(    1\) A --> B  SYN my sequence number is X) N
(    2\) A <-- B  ACK your sequence number is X) N
(    3\) A <-- B  SYN my sequence number is Y) N
(    4\) A --> B  ACK your sequence number is Y) N
() N
() N
() N
(                                                               [Page 27]) N
() N
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
(                                                          September 1981) N
(Transmission Control Protocol) N
(Functional Specification) N
() N
() N
() N
(  Because steps 2 and 3 can be combined in a single message this is) N
(  called the three way \(or three message\) handshake.) N
() N
(  A three way handshake is necessary because sequence numbers are not) N
(  tied to a global clock in the network, and TCPs may have different) N
(  mechanisms for picking the ISN's.  The receiver of the first SYN has) N
(  no way of knowing whether the segment was an old delayed one or not,) N
(  unless it remembers the last sequence number used on the connection) N
(  \(which is not always possible\), and so it must ask the sender to) N
(  verify this SYN.  The three way handshake and the advantages of a) N
(  clock-driven scheme are discussed in [3].) N
() N
(  Knowing When to Keep Quiet) N
() N
(  To be sure that a TCP does not create a segment that carries a) N
(  sequence number which may be duplicated by an old segment remaining in) N
(  the network, the TCP must keep quiet for a maximum segment lifetime) N
(  \(MSL\) before assigning any sequence numbers upon starting up or) N
(  recovering from a crash in which memory of sequence numbers in use was) N
(  lost.  For this specification the MSL is taken to be 2 minutes.  This) N
(  is an engineering choice, and may be changed if experience indicates) N
(  it is desirable to do so.  Note that if a TCP is reinitialized in some) N
(  sense, yet retains its memory of sequence numbers in use, then it need) N
(  not wait at all; it must only be sure to use sequence numbers larger) N
(  than those recently used.) N
() N
(  The TCP Quiet Time Concept) N
() N
(    This specification provides that hosts which "crash" without) N
(    retaining any knowledge of the last sequence numbers transmitted on) N
(    each active \(i.e., not closed\) connection shall delay emitting any) N
(    TCP segments for at least the agreed Maximum Segment Lifetime \(MSL\)) N
(    in the internet system of which the host is a part.  In the) N
(    paragraphs below, an explanation for this specification is given.) N
(    TCP implementors may violate the "quiet time" restriction, but only) N
(    at the risk of causing some old data to be accepted as new or new) N
(    data rejected as old duplicated by some receivers in the internet) N
(    system.) N
() N
(    TCPs consume sequence number space each time a segment is formed and) N
(    entered into the network output queue at a source host. The) N
(    duplicate detection and sequencing algorithm in the TCP protocol) N
(    relies on the unique binding of segment data to sequence space to) N
(    the extent that sequence numbers will not cycle through all 2**32) N
(    values before the segment data bound to those sequence numbers has) N
(    been delivered and acknowledged by the receiver and all duplicate) N
(    copies of the segments have "drained" from the internet.  Without) N
(    such an assumption, two distinct TCP segments could conceivably be) N
() N
() N
([Page 28]                                                               ) N
() N
border
grestore
end % of iso1dict
pagesave restore
showpage
%%Page: (35-36) 18
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
(September 1981                                                          ) N
(                                           Transmission Control Protocol) N
(                                                Functional Specification) N
() N
() N
() N
(    assigned the same or overlapping sequence numbers, causing confusion) N
(    at the receiver as to which data is new and which is old.  Remember) N
(    that each segment is bound to as many consecutive sequence numbers) N
(    as there are octets of data in the segment.) N
() N
(    Under normal conditions, TCPs keep track of the next sequence number) N
(    to emit and the oldest awaiting acknowledgment so as to avoid) N
(    mistakenly using a sequence number over before its first use has) N
(    been acknowledged.  This alone does not guarantee that old duplicate) N
(    data is drained from the net, so the sequence space has been made) N
(    very large to reduce the probability that a wandering duplicate will) N
(    cause trouble upon arrival.  At 2 megabits/sec. it takes 4.5 hours) N
(    to use up 2**32 octets of sequence space.  Since the maximum segment) N
(    lifetime in the net is not likely to exceed a few tens of seconds,) N
(    this is deemed ample protection for foreseeable nets, even if data) N
(    rates escalate to l0's of megabits/sec.  At 100 megabits/sec, the) N
(    cycle time is 5.4 minutes which may be a little short, but still) N
(    within reason.) N
() N
(    The basic duplicate detection and sequencing algorithm in TCP can be) N
(    defeated, however, if a source TCP does not have any memory of the) N
(    sequence numbers it last used on a given connection. For example, if) N
(    the TCP were to start all connections with sequence number 0, then) N
(    upon crashing and restarting, a TCP might re-form an earlier) N
(    connection \(possibly after half-open connection resolution\) and emit) N
(    packets with sequence numbers identical to or overlapping with) N
(    packets still in the network which were emitted on an earlier) N
(    incarnation of the same connection.  In the absence of knowledge) N
(    about the sequence numbers used on a particular connection, the TCP) N
(    specification recommends that the source delay for MSL seconds) N
(    before emitting segments on the connection, to allow time for) N
(    segments from the earlier connection incarnation to drain from the) N
(    system.) N
() N
(    Even hosts which can remember the time of day and used it to select) N
(    initial sequence number values are not immune from this problem) N
(    \(i.e., even if time of day is used to select an initial sequence) N
(    number for each new connection incarnation\).) N
() N
(    Suppose, for example, that a connection is opened starting with) N
(    sequence number S.  Suppose that this connection is not used much) N
(    and that eventually the initial sequence number function \(ISN\(t\)\)) N
(    takes on a value equal to the sequence number, say S1, of the last) N
(    segment sent by this TCP on a particular connection.  Now suppose,) N
(    at this instant, the host crashes, recovers, and establishes a new) N
(    incarnation of the connection. The initial sequence number chosen is) N
(    S1 = ISN\(t\) -- last used sequence number on old incarnation of) N
(    connection!  If the recovery occurs quickly enough, any old) N
() N
() N
(                                                               [Page 29]) N
() N
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
(                                                          September 1981) N
(Transmission Control Protocol) N
(Functional Specification) N
() N
() N
() N
(    duplicates in the net bearing sequence numbers in the neighborhood) N
(    of S1 may arrive and be treated as new packets by the receiver of) N
(    the new incarnation of the connection.) N
() N
(    The problem is that the recovering host may not know for how long it) N
(    crashed nor does it know whether there are still old duplicates in) N
(    the system from earlier connection incarnations.) N
() N
(    One way to deal with this problem is to deliberately delay emitting) N
(    segments for one MSL after recovery from a crash- this is the "quite) N
(    time" specification.  Hosts which prefer to avoid waiting are) N
(    willing to risk possible confusion of old and new packets at a given) N
(    destination may choose not to wait for the "quite time".) N
(    Implementors may provide TCP users with the ability to select on a) N
(    connection by connection basis whether to wait after a crash, or may) N
(    informally implement the "quite time" for all connections.) N
(    Obviously, even where a user selects to "wait," this is not) N
(    necessary after the host has been "up" for at least MSL seconds.) N
() N
(    To summarize: every segment emitted occupies one or more sequence) N
(    numbers in the sequence space, the numbers occupied by a segment are) N
(    "busy" or "in use" until MSL seconds have passed, upon crashing a) N
(    block of space-time is occupied by the octets of the last emitted) N
(    segment, if a new connection is started too soon and uses any of the) N
(    sequence numbers in the space-time footprint of the last segment of) N
(    the previous connection incarnation, there is a potential sequence) N
(    number overlap area which could cause confusion at the receiver.) N
() N
(3.4.  Establishing a connection) N
() N
(  The "three-way handshake" is the procedure used to establish a) N
(  connection.  This procedure normally is initiated by one TCP and) N
(  responded to by another TCP.  The procedure also works if two TCP) N
(  simultaneously initiate the procedure.  When simultaneous attempt) N
(  occurs, each TCP receives a "SYN" segment which carries no) N
(  acknowledgment after it has sent a "SYN".  Of course, the arrival of) N
(  an old duplicate "SYN" segment can potentially make it appear, to the) N
(  recipient, that a simultaneous connection initiation is in progress.) N
(  Proper use of "reset" segments can disambiguate these cases.) N
() N
(  Several examples of connection initiation follow.  Although these) N
(  examples do not show connection synchronization using data-carrying) N
(  segments, this is perfectly legitimate, so long as the receiving TCP) N
(  doesn't deliver the data to the user until it is clear the data is) N
(  valid \(i.e., the data must be buffered at the receiver until the) N
(  connection reaches the ESTABLISHED state\).  The three-way handshake) N
(  reduces the possibility of false connections.  It is the) N
() N
() N
() N
([Page 30]                                                               ) N
() N
border
grestore
end % of iso1dict
pagesave restore
showpage
%%Page: (37-38) 19
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
(September 1981                                                          ) N
(                                           Transmission Control Protocol) N
(                                                Functional Specification) N
() N
() N
() N
(  implementation of a trade-off between memory and messages to provide) N
(  information for this checking.) N
() N
(  The simplest three-way handshake is shown in figure 7 below.  The) N
(  figures should be interpreted in the following way.  Each line is) N
(  numbered for reference purposes.  Right arrows \(-->\) indicate) N
(  departure of a TCP segment from TCP A to TCP B, or arrival of a) N
(  segment at B from A.  Left arrows \(<--\), indicate the reverse.) N
(  Ellipsis \(...\) indicates a segment which is still in the network) N
(  \(delayed\).  An "XXX" indicates a segment which is lost or rejected.) N
(  Comments appear in parentheses.  TCP states represent the state AFTER) N
(  the departure or arrival of the segment \(whose contents are shown in) N
(  the center of each line\).  Segment contents are shown in abbreviated) N
(  form, with sequence number, control flags, and ACK field.  Other) N
(  fields such as window, addresses, lengths, and text have been left out) N
(  in the interest of clarity.) N
() N
(  ) N
() N
(      TCP A                                                TCP B) N
() N
(  1.  CLOSED                                               LISTEN) N
() N
(  2.  SYN-SENT    --> <SEQ=100><CTL=SYN>               --> SYN-RECEIVED) N
() N
(  3.  ESTABLISHED <-- <SEQ=300><ACK=101><CTL=SYN,ACK>  <-- SYN-RECEIVED) N
() N
(  4.  ESTABLISHED --> <SEQ=101><ACK=301><CTL=ACK>       --> ESTABLISHED) N
() N
(  5.  ESTABLISHED --> <SEQ=101><ACK=301><CTL=ACK><DATA> --> ESTABLISHED) N
() N
(          Basic 3-Way Handshake for Connection Synchronization) N
() N
(                                Figure 7.) N
() N
(  In line 2 of figure 7, TCP A begins by sending a SYN segment) N
(  indicating that it will use sequence numbers starting with sequence) N
(  number 100.  In line 3, TCP B sends a SYN and acknowledges the SYN it) N
(  received from TCP A.  Note that the acknowledgment field indicates TCP) N
(  B is now expecting to hear sequence 101, acknowledging the SYN which) N
(  occupied sequence 100.) N
() N
(  At line 4, TCP A responds with an empty segment containing an ACK for) N
(  TCP B's SYN; and in line 5, TCP A sends some data.  Note that the) N
(  sequence number of the segment in line 5 is the same as in line 4) N
(  because the ACK does not occupy sequence number space \(if it did, we) N
(  would wind up ACKing ACK's!\).) N
() N
() N
() N
(                                                               [Page 31]) N
() N
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
(                                                          September 1981) N
(Transmission Control Protocol) N
(Functional Specification) N
() N
() N
() N
(  Simultaneous initiation is only slightly more complex, as is shown in) N
(  figure 8.  Each TCP cycles from CLOSED to SYN-SENT to SYN-RECEIVED to) N
(  ESTABLISHED.) N
() N
(  ) N
() N
(      TCP A                                            TCP B) N
() N
(  1.  CLOSED                                           CLOSED) N
() N
(  2.  SYN-SENT     --> <SEQ=100><CTL=SYN>              ...) N
() N
(  3.  SYN-RECEIVED <-- <SEQ=300><CTL=SYN>              <-- SYN-SENT) N
() N
(  4.               ... <SEQ=100><CTL=SYN>              --> SYN-RECEIVED) N
() N
(  5.  SYN-RECEIVED --> <SEQ=100><ACK=301><CTL=SYN,ACK> ...) N
() N
(  6.  ESTABLISHED  <-- <SEQ=300><ACK=101><CTL=SYN,ACK> <-- SYN-RECEIVED) N
() N
(  7.               ... <SEQ=101><ACK=301><CTL=ACK>     --> ESTABLISHED) N
() N
(                Simultaneous Connection Synchronization) N
() N
(                               Figure 8.) N
() N
(  The principle reason for the three-way handshake is to prevent old) N
(  duplicate connection initiations from causing confusion.  To deal with) N
(  this, a special control message, reset, has been devised.  If the) N
(  receiving TCP is in a  non-synchronized state \(i.e., SYN-SENT,) N
(  SYN-RECEIVED\), it returns to LISTEN on receiving an acceptable reset.) N
(  If the TCP is in one of the synchronized states \(ESTABLISHED,) N
(  FIN-WAIT-1, FIN-WAIT-2, CLOSE-WAIT, CLOSING, LAST-ACK, TIME-WAIT\), it) N
(  aborts the connection and informs its user.  We discuss this latter) N
(  case under "half-open" connections below.) N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
([Page 32]                                                               ) N
() N
border
grestore
end % of iso1dict
pagesave restore
showpage
%%Page: (39-40) 20
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
(September 1981                                                          ) N
(                                           Transmission Control Protocol) N
(                                                Functional Specification) N
() N
() N
() N
(  ) N
() N
(      TCP A                                                TCP B) N
() N
(  1.  CLOSED                                               LISTEN) N
() N
(  2.  SYN-SENT    --> <SEQ=100><CTL=SYN>               ...) N
() N
(  3.  \(duplicate\) ... <SEQ=90><CTL=SYN>               --> SYN-RECEIVED) N
() N
(  4.  SYN-SENT    <-- <SEQ=300><ACK=91><CTL=SYN,ACK>  <-- SYN-RECEIVED) N
() N
(  5.  SYN-SENT    --> <SEQ=91><CTL=RST>               --> LISTEN) N
(  ) N
() N
(  6.              ... <SEQ=100><CTL=SYN>               --> SYN-RECEIVED) N
() N
(  7.  SYN-SENT    <-- <SEQ=400><ACK=101><CTL=SYN,ACK>  <-- SYN-RECEIVED) N
() N
(  8.  ESTABLISHED --> <SEQ=101><ACK=401><CTL=ACK>      --> ESTABLISHED) N
() N
(                    Recovery from Old Duplicate SYN) N
() N
(                               Figure 9.) N
() N
(  As a simple example of recovery from old duplicates, consider) N
(  figure 9.  At line 3, an old duplicate SYN arrives at TCP B.  TCP B) N
(  cannot tell that this is an old duplicate, so it responds normally) N
(  \(line 4\).  TCP A detects that the ACK field is incorrect and returns a) N
(  RST \(reset\) with its SEQ field selected to make the segment) N
(  believable.  TCP B, on receiving the RST, returns to the LISTEN state.) N
(  When the original SYN \(pun intended\) finally arrives at line 6, the) N
(  synchronization proceeds normally.  If the SYN at line 6 had arrived) N
(  before the RST, a more complex exchange might have occurred with RST's) N
(  sent in both directions.) N
() N
(  Half-Open Connections and Other Anomalies) N
() N
(  An established connection is said to be  "half-open" if one of the) N
(  TCPs has closed or aborted the connection at its end without the) N
(  knowledge of the other, or if the two ends of the connection have) N
(  become desynchronized owing to a crash that resulted in loss of) N
(  memory.  Such connections will automatically become reset if an) N
(  attempt is made to send data in either direction.  However, half-open) N
(  connections are expected to be unusual, and the recovery procedure is) N
(  mildly involved.) N
() N
(  If at site A the connection no longer exists, then an attempt by the) N
() N
() N
(                                                               [Page 33]) N
() N
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
(                                                          September 1981) N
(Transmission Control Protocol) N
(Functional Specification) N
() N
() N
() N
(  user at site B to send any data on it will result in the site B TCP) N
(  receiving a reset control message.  Such a message indicates to the) N
(  site B TCP that something is wrong, and it is expected to abort the) N
(  connection.) N
() N
(  Assume that two user processes A and B are communicating with one) N
(  another when a crash occurs causing loss of memory to A's TCP.) N
(  Depending on the operating system supporting A's TCP, it is likely) N
(  that some error recovery mechanism exists.  When the TCP is up again,) N
(  A is likely to start again from the beginning or from a recovery) N
(  point.  As a result, A will probably try to OPEN the connection again) N
(  or try to SEND on the connection it believes open.  In the latter) N
(  case, it receives the error message "connection not open" from the) N
(  local \(A's\) TCP.  In an attempt to establish the connection, A's TCP) N
(  will send a segment containing SYN.  This scenario leads to the) N
(  example shown in figure 10.  After TCP A crashes, the user attempts to) N
(  re-open the connection.  TCP B, in the meantime, thinks the connection) N
(  is open.) N
() N
(  ) N
() N
(      TCP A                                           TCP B) N
() N
(  1.  \(CRASH\)                               \(send 300,receive 100\)) N
() N
(  2.  CLOSED                                           ESTABLISHED) N
() N
(  3.  SYN-SENT --> <SEQ=400><CTL=SYN>              --> \(??\)) N
() N
(  4.  \(!!\)     <-- <SEQ=300><ACK=100><CTL=ACK>     <-- ESTABLISHED) N
() N
(  5.  SYN-SENT --> <SEQ=100><CTL=RST>              --> \(Abort!!\)) N
() N
(  6.  SYN-SENT                                         CLOSED) N
() N
(  7.  SYN-SENT --> <SEQ=400><CTL=SYN>              -->) N
() N
(                     Half-Open Connection Discovery) N
() N
(                               Figure 10.) N
() N
(  When the SYN arrives at line 3, TCP B, being in a synchronized state,) N
(  and the incoming segment outside the window, responds with an) N
(  acknowledgment indicating what sequence it next expects to hear \(ACK) N
(  100\).  TCP A sees that this segment does not acknowledge anything it) N
(  sent and, being unsynchronized, sends a reset \(RST\) because it has) N
(  detected a half-open connection.  TCP B aborts at line 5.  TCP A will) N
() N
() N
() N
([Page 34]                                                               ) N
() N
border
grestore
end % of iso1dict
pagesave restore
showpage
%%Page: (41-42) 21
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
(September 1981                                                          ) N
(                                           Transmission Control Protocol) N
(                                                Functional Specification) N
() N
() N
() N
(  continue to try to establish the connection; the problem is now) N
(  reduced to the basic 3-way handshake of figure 7.) N
() N
(  An interesting alternative case occurs when TCP A crashes and TCP B) N
(  tries to send data on what it thinks is a synchronized connection.) N
(  This is illustrated in figure 11.  In this case, the data arriving at) N
(  TCP A from TCP B \(line 2\) is unacceptable because no such connection) N
(  exists, so TCP A sends a RST.  The RST is acceptable so TCP B) N
(  processes it and aborts the connection.) N
() N
(  ) N
() N
(        TCP A                                              TCP B) N
() N
(  1.  \(CRASH\)                                   \(send 300,receive 100\)) N
() N
(  2.  \(??\)    <-- <SEQ=300><ACK=100><DATA=10><CTL=ACK> <-- ESTABLISHED) N
() N
(  3.          --> <SEQ=100><CTL=RST>                   --> \(ABORT!!\)) N
() N
(           Active Side Causes Half-Open Connection Discovery) N
() N
(                               Figure 11.) N
() N
(  In figure 12, we find the two TCPs A and B with passive connections) N
(  waiting for SYN.  An old duplicate arriving at TCP B \(line 2\) stirs B) N
(  into action.  A SYN-ACK is returned \(line 3\) and causes TCP A to) N
(  generate a RST \(the ACK in line 3 is not acceptable\).  TCP B accepts) N
(  the reset and returns to its passive LISTEN state.) N
() N
(  ) N
() N
(      TCP A                                         TCP B) N
() N
(  1.  LISTEN                                        LISTEN) N
() N
(  2.       ... <SEQ=Z><CTL=SYN>                -->  SYN-RECEIVED) N
() N
(  3.  \(??\) <-- <SEQ=X><ACK=Z+1><CTL=SYN,ACK>   <--  SYN-RECEIVED) N
() N
(  4.       --> <SEQ=Z+1><CTL=RST>              -->  \(return to LISTEN!\)) N
() N
(  5.  LISTEN                                        LISTEN) N
() N
(       Old Duplicate SYN Initiates a Reset on two Passive Sockets) N
() N
(                               Figure 12.) N
() N
() N
() N
(                                                               [Page 35]) N
() N
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
(                                                          September 1981) N
(Transmission Control Protocol) N
(Functional Specification) N
() N
() N
() N
(  A variety of other cases are possible, all of which are accounted for) N
(  by the following rules for RST generation and processing.) N
() N
(  Reset Generation) N
() N
(  As a general rule, reset \(RST\) must be sent whenever a segment arrives) N
(  which apparently is not intended for the current connection.  A reset) N
(  must not be sent if it is not clear that this is the case.) N
() N
(  There are three groups of states:) N
() N
(    1.  If the connection does not exist \(CLOSED\) then a reset is sent) N
(    in response to any incoming segment except another reset.  In) N
(    particular, SYNs addressed to a non-existent connection are rejected) N
(    by this means.) N
() N
(    If the incoming segment has an ACK field, the reset takes its) N
(    sequence number from the ACK field of the segment, otherwise the) N
(    reset has sequence number zero and the ACK field is set to the sum) N
(    of the sequence number and segment length of the incoming segment.) N
(    The connection remains in the CLOSED state.) N
() N
(    2.  If the connection is in any non-synchronized state \(LISTEN,) N
(    SYN-SENT, SYN-RECEIVED\), and the incoming segment acknowledges) N
(    something not yet sent \(the segment carries an unacceptable ACK\), or) N
(    if an incoming segment has a security level or compartment which) N
(    does not exactly match the level and compartment requested for the) N
(    connection, a reset is sent.) N
() N
(    If our SYN has not been acknowledged and the precedence level of the) N
(    incoming segment is higher than the precedence level requested then) N
(    either raise the local precedence level \(if allowed by the user and) N
(    the system\) or send a reset; or if the precedence level of the) N
(    incoming segment is lower than the precedence level requested then) N
(    continue as if the precedence matched exactly \(if the remote TCP) N
(    cannot raise the precedence level to match ours this will be) N
(    detected in the next segment it sends, and the connection will be) N
(    terminated then\).  If our SYN has been acknowledged \(perhaps in this) N
(    incoming segment\) the precedence level of the incoming segment must) N
(    match the local precedence level exactly, if it does not a reset) N
(    must be sent.) N
() N
(    If the incoming segment has an ACK field, the reset takes its) N
(    sequence number from the ACK field of the segment, otherwise the) N
(    reset has sequence number zero and the ACK field is set to the sum) N
(    of the sequence number and segment length of the incoming segment.) N
(    The connection remains in the same state.) N
() N
() N
() N
([Page 36]                                                               ) N
() N
border
grestore
end % of iso1dict
pagesave restore
showpage
%%Page: (43-44) 22
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
(September 1981                                                          ) N
(                                           Transmission Control Protocol) N
(                                                Functional Specification) N
() N
() N
() N
(    3.  If the connection is in a synchronized state \(ESTABLISHED,) N
(    FIN-WAIT-1, FIN-WAIT-2, CLOSE-WAIT, CLOSING, LAST-ACK, TIME-WAIT\),) N
(    any unacceptable segment \(out of window sequence number or) N
(    unacceptible acknowledgment number\) must elicit only an empty) N
(    acknowledgment segment containing the current send-sequence number) N
(    and an acknowledgment indicating the next sequence number expected) N
(    to be received, and the connection remains in the same state.) N
() N
(    If an incoming segment has a security level, or compartment, or) N
(    precedence which does not exactly match the level, and compartment,) N
(    and precedence requested for the connection,a reset is sent and) N
(    connection goes to the CLOSED state.  The reset takes its sequence) N
(    number from the ACK field of the incoming segment.) N
() N
(  Reset Processing) N
() N
(  In all states except SYN-SENT, all reset \(RST\) segments are validated) N
(  by checking their SEQ-fields.  A reset is valid if its sequence number) N
(  is in the window.  In the SYN-SENT state \(a RST received in response) N
(  to an initial SYN\), the RST is acceptable if the ACK field) N
(  acknowledges the SYN.) N
() N
(  The receiver of a RST first validates it, then changes state.  If the) N
(  receiver was in the LISTEN state, it ignores it.  If the receiver was) N
(  in SYN-RECEIVED state and had previously been in the LISTEN state,) N
(  then the receiver returns to the LISTEN state, otherwise the receiver) N
(  aborts the connection and goes to the CLOSED state.  If the receiver) N
(  was in any other state, it aborts the connection and advises the user) N
(  and goes to the CLOSED state.) N
() N
(3.5.  Closing a Connection) N
() N
(  CLOSE is an operation meaning "I have no more data to send."  The) N
(  notion of closing a full-duplex connection is subject to ambiguous) N
(  interpretation, of course, since it may not be obvious how to treat) N
(  the receiving side of the connection.  We have chosen to treat CLOSE) N
(  in a simplex fashion.  The user who CLOSEs may continue to RECEIVE) N
(  until he is told that the other side has CLOSED also.  Thus, a program) N
(  could initiate several SENDs followed by a CLOSE, and then continue to) N
(  RECEIVE until signaled that a RECEIVE failed because the other side) N
(  has CLOSED.  We assume that the TCP will signal a user, even if no) N
(  RECEIVEs are outstanding, that the other side has closed, so the user) N
(  can terminate his side gracefully.  A TCP will reliably deliver all) N
(  buffers SENT before the connection was CLOSED so a user who expects no) N
(  data in return need only wait to hear the connection was CLOSED) N
(  successfully to know that all his data was received at the destination) N
(  TCP.  Users must keep reading connections they close for sending until) N
(  the TCP says no more data.) N
() N
() N
(                                                               [Page 37]) N
() N
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
(                                                          September 1981) N
(Transmission Control Protocol) N
(Functional Specification) N
() N
() N
() N
(  There are essentially three cases:) N
() N
(    1\) The user initiates by telling the TCP to CLOSE the connection) N
() N
(    2\) The remote TCP initiates by sending a FIN control signal) N
() N
(    3\) Both users CLOSE simultaneously) N
() N
(  Case 1:  Local user initiates the close) N
() N
(    In this case, a FIN segment can be constructed and placed on the) N
(    outgoing segment queue.  No further SENDs from the user will be) N
(    accepted by the TCP, and it enters the FIN-WAIT-1 state.  RECEIVEs) N
(    are allowed in this state.  All segments preceding and including FIN) N
(    will be retransmitted until acknowledged.  When the other TCP has) N
(    both acknowledged the FIN and sent a FIN of its own, the first TCP) N
(    can ACK this FIN.  Note that a TCP receiving a FIN will ACK but not) N
(    send its own FIN until its user has CLOSED the connection also.) N
() N
(  Case 2:  TCP receives a FIN from the network) N
() N
(    If an unsolicited FIN arrives from the network, the receiving TCP) N
(    can ACK it and tell the user that the connection is closing.  The) N
(    user will respond with a CLOSE, upon which the TCP can send a FIN to) N
(    the other TCP after sending any remaining data.  The TCP then waits) N
(    until its own FIN is acknowledged whereupon it deletes the) N
(    connection.  If an ACK is not forthcoming, after the user timeout) N
(    the connection is aborted and the user is told.) N
() N
(  Case 3:  both users close simultaneously) N
() N
(    A simultaneous CLOSE by users at both ends of a connection causes) N
(    FIN segments to be exchanged.  When all segments preceding the FINs) N
(    have been processed and acknowledged, each TCP can ACK the FIN it) N
(    has received.  Both will, upon receiving these ACKs, delete the) N
(    connection.) N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
([Page 38]                                                               ) N
() N
border
grestore
end % of iso1dict
pagesave restore
showpage
%%Page: (45-46) 23
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
(September 1981                                                          ) N
(                                           Transmission Control Protocol) N
(                                                Functional Specification) N
() N
() N
() N
(  ) N
() N
(      TCP A                                                TCP B) N
() N
(  1.  ESTABLISHED                                          ESTABLISHED) N
() N
(  2.  \(Close\)) N
(      FIN-WAIT-1  --> <SEQ=100><ACK=300><CTL=FIN,ACK>  --> CLOSE-WAIT) N
() N
(  3.  FIN-WAIT-2  <-- <SEQ=300><ACK=101><CTL=ACK>      <-- CLOSE-WAIT) N
() N
(  4.                                                       \(Close\)) N
(      TIME-WAIT   <-- <SEQ=300><ACK=101><CTL=FIN,ACK>  <-- LAST-ACK) N
() N
(  5.  TIME-WAIT   --> <SEQ=101><ACK=301><CTL=ACK>      --> CLOSED) N
() N
(  6.  \(2 MSL\)) N
(      CLOSED                                                      ) N
() N
(                         Normal Close Sequence) N
() N
(                               Figure 13.) N
() N
(  ) N
() N
(      TCP A                                                TCP B) N
() N
(  1.  ESTABLISHED                                          ESTABLISHED) N
() N
(  2.  \(Close\)                                              \(Close\)) N
(      FIN-WAIT-1  --> <SEQ=100><ACK=300><CTL=FIN,ACK>  ... FIN-WAIT-1) N
(                  <-- <SEQ=300><ACK=100><CTL=FIN,ACK>  <--) N
(                  ... <SEQ=100><ACK=300><CTL=FIN,ACK>  -->) N
() N
(  3.  CLOSING     --> <SEQ=101><ACK=301><CTL=ACK>      ... CLOSING) N
(                  <-- <SEQ=301><ACK=101><CTL=ACK>      <--) N
(                  ... <SEQ=101><ACK=301><CTL=ACK>      -->) N
() N
(  4.  TIME-WAIT                                            TIME-WAIT) N
(      \(2 MSL\)                                              \(2 MSL\)) N
(      CLOSED                                               CLOSED) N
() N
(                      Simultaneous Close Sequence) N
() N
(                               Figure 14.) N
() N
() N
() N
() N
() N
(                                                               [Page 39]) N
() N
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
(                                                          September 1981) N
(Transmission Control Protocol) N
(Functional Specification) N
() N
() N
() N
(3.6.  Precedence and Security) N
() N
(  The intent is that connection be allowed only between ports operating) N
(  with exactly the same security and compartment values and at the) N
(  higher of the precedence level requested by the two ports.) N
() N
(  The precedence and security parameters used in TCP are exactly those) N
(  defined in the Internet Protocol \(IP\) [2].  Throughout this TCP) N
(  specification the term "security/compartment" is intended to indicate) N
(  the security parameters used in IP including security, compartment,) N
(  user group, and handling restriction.) N
() N
(  A connection attempt with mismatched security/compartment values or a) N
(  lower precedence value must be rejected by sending a reset.  Rejecting) N
(  a connection due to too low a precedence only occurs after an) N
(  acknowledgment of the SYN has been received.) N
() N
(  Note that TCP modules which operate only at the default value of) N
(  precedence will still have to check the precedence of incoming) N
(  segments and possibly raise the precedence level they use on the) N
(  connection.) N
() N
(  The security paramaters may be used even in a non-secure environment) N
(  \(the values would indicate unclassified data\), thus hosts in) N
(  non-secure environments must be prepared to receive the security) N
(  parameters, though they need not send them.) N
() N
(3.7.  Data Communication) N
() N
(  Once the connection is established data is communicated by the) N
(  exchange of segments.  Because segments may be lost due to errors) N
(  \(checksum test failure\), or network congestion, TCP uses) N
(  retransmission \(after a timeout\) to ensure delivery of every segment.) N
(  Duplicate segments may arrive due to network or TCP retransmission.) N
(  As discussed in the section on sequence numbers the TCP performs) N
(  certain tests on the sequence and acknowledgment numbers in the) N
(  segments to verify their acceptability.) N
() N
(  The sender of data keeps track of the next sequence number to use in) N
(  the variable SND.NXT.  The receiver of data keeps track of the next) N
(  sequence number to expect in the variable RCV.NXT.  The sender of data) N
(  keeps track of the oldest unacknowledged sequence number in the) N
(  variable SND.UNA.  If the data flow is momentarily idle and all data) N
(  sent has been acknowledged then the three variables will be equal.) N
() N
(  When the sender creates a segment and transmits it the sender advances) N
(  SND.NXT.  When the receiver accepts a segment it advances RCV.NXT and) N
(  sends an acknowledgment.  When the data sender receives an) N
() N
() N
([Page 40]                                                               ) N
() N
border
grestore
end % of iso1dict
pagesave restore
showpage
%%Page: (47-48) 24
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
(September 1981                                                          ) N
(                                           Transmission Control Protocol) N
(                                                Functional Specification) N
() N
() N
() N
(  acknowledgment it advances SND.UNA.  The extent to which the values of) N
(  these variables differ is a measure of the delay in the communication.) N
(  The amount by which the variables are advanced is the length of the) N
(  data in the segment.  Note that once in the ESTABLISHED state all) N
(  segments must carry current acknowledgment information.) N
() N
(  The CLOSE user call implies a push function, as does the FIN control) N
(  flag in an incoming segment.) N
() N
(  Retransmission Timeout) N
() N
(  Because of the variability of the networks that compose an) N
(  internetwork system and the wide range of uses of TCP connections the) N
(  retransmission timeout must be dynamically determined.  One procedure) N
(  for determining a retransmission time out is given here as an) N
(  illustration.) N
() N
(    An Example Retransmission Timeout Procedure) N
() N
(      Measure the elapsed time between sending a data octet with a) N
(      particular sequence number and receiving an acknowledgment that) N
(      covers that sequence number \(segments sent do not have to match) N
(      segments received\).  This measured elapsed time is the Round Trip) N
(      Time \(RTT\).  Next compute a Smoothed Round Trip Time \(SRTT\) as:) N
() N
(        SRTT = \( ALPHA * SRTT \) + \(\(1-ALPHA\) * RTT\)) N
() N
(      and based on this, compute the retransmission timeout \(RTO\) as:) N
() N
(        RTO = min[UBOUND,max[LBOUND,\(BETA*SRTT\)]]) N
() N
(      where UBOUND is an upper bound on the timeout \(e.g., 1 minute\),) N
(      LBOUND is a lower bound on the timeout \(e.g., 1 second\), ALPHA is) N
(      a smoothing factor \(e.g., .8 to .9\), and BETA is a delay variance) N
(      factor \(e.g., 1.3 to 2.0\).) N
() N
(  The Communication of Urgent Information) N
() N
(  The objective of the TCP urgent mechanism is to allow the sending user) N
(  to stimulate the receiving user to accept some urgent data and to) N
(  permit the receiving TCP to indicate to the receiving user when all) N
(  the currently known urgent data has been received by the user.) N
() N
(  This mechanism permits a point in the data stream to be designated as) N
(  the end of urgent information.  Whenever this point is in advance of) N
(  the receive sequence number \(RCV.NXT\) at the receiving TCP, that TCP) N
(  must tell the user to go into "urgent mode"; when the receive sequence) N
(  number catches up to the urgent pointer, the TCP must tell user to go) N
() N
() N
(                                                               [Page 41]) N
() N
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
(                                                          September 1981) N
(Transmission Control Protocol) N
(Functional Specification) N
() N
() N
() N
(  into "normal mode".  If the urgent pointer is updated while the user) N
(  is in "urgent mode", the update will be invisible to the user.) N
() N
(  The method employs a urgent field which is carried in all segments) N
(  transmitted.  The URG control flag indicates that the urgent field is) N
(  meaningful and must be added to the segment sequence number to yield) N
(  the urgent pointer.  The absence of this flag indicates that there is) N
(  no urgent data outstanding.) N
() N
(  To send an urgent indication the user must also send at least one data) N
(  octet.  If the sending user also indicates a push, timely delivery of) N
(  the urgent information to the destination process is enhanced.) N
() N
(  Managing the Window) N
() N
(  The window sent in each segment indicates the range of sequence) N
(  numbers the sender of the window \(the data receiver\) is currently) N
(  prepared to accept.  There is an assumption that this is related to) N
(  the currently available data buffer space available for this) N
(  connection.) N
() N
(  Indicating a large window encourages transmissions.  If more data) N
(  arrives than can be accepted, it will be discarded.  This will result) N
(  in excessive retransmissions, adding unnecessarily to the load on the) N
(  network and the TCPs.  Indicating a small window may restrict the) N
(  transmission of data to the point of introducing a round trip delay) N
(  between each new segment transmitted.) N
() N
(  The mechanisms provided allow a TCP to advertise a large window and to) N
(  subsequently advertise a much smaller window without having accepted) N
(  that much data.  This, so called "shrinking the window," is strongly) N
(  discouraged.  The robustness principle dictates that TCPs will not) N
(  shrink the window themselves, but will be prepared for such behavior) N
(  on the part of other TCPs.) N
() N
(  The sending TCP must be prepared to accept from the user and send at) N
(  least one octet of new data even if the send window is zero.  The) N
(  sending TCP must regularly retransmit to the receiving TCP even when) N
(  the window is zero.  Two minutes is recommended for the retransmission) N
(  interval when the window is zero.  This retransmission is essential to) N
(  guarantee that when either TCP has a zero window the re-opening of the) N
(  window will be reliably reported to the other.) N
() N
(  When the receiving TCP has a zero window and a segment arrives it must) N
(  still send an acknowledgment showing its next expected sequence number) N
(  and current window \(zero\).) N
() N
(  The sending TCP packages the data to be transmitted into segments) N
() N
() N
([Page 42]                                                               ) N
() N
border
grestore
end % of iso1dict
pagesave restore
showpage
%%Page: (49-50) 25
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
(September 1981                                                          ) N
(                                           Transmission Control Protocol) N
(                                                Functional Specification) N
() N
() N
() N
(  which fit the current window, and may repackage segments on the) N
(  retransmission queue.  Such repackaging is not required, but may be) N
(  helpful.) N
() N
(  In a connection with a one-way data flow, the window information will) N
(  be carried in acknowledgment segments that all have the same sequence) N
(  number so there will be no way to reorder them if they arrive out of) N
(  order.  This is not a serious problem, but it will allow the window) N
(  information to be on occasion temporarily based on old reports from) N
(  the data receiver.  A refinement to avoid this problem is to act on) N
(  the window information from segments that carry the highest) N
(  acknowledgment number \(that is segments with acknowledgment number) N
(  equal or greater than the highest previously received\).) N
() N
(  The window management procedure has significant influence on the) N
(  communication performance.  The following comments are suggestions to) N
(  implementers.) N
() N
(    Window Management Suggestions) N
() N
(      Allocating a very small window causes data to be transmitted in) N
(      many small segments when better performance is achieved using) N
(      fewer large segments.) N
() N
(      One suggestion for avoiding small windows is for the receiver to) N
(      defer updating a window until the additional allocation is at) N
(      least X percent of the maximum allocation possible for the) N
(      connection \(where X might be 20 to 40\).) N
() N
(      Another suggestion is for the sender to avoid sending small) N
(      segments by waiting until the window is large enough before) N
(      sending data.  If the the user signals a push function then the) N
(      data must be sent even if it is a small segment.) N
() N
(      Note that the acknowledgments should not be delayed or unnecessary) N
(      retransmissions will result.  One strategy would be to send an) N
(      acknowledgment when a small segment arrives \(with out updating the) N
(      window information\), and then to send another acknowledgment with) N
(      new window information when the window is larger.) N
() N
(      The segment sent to probe a zero window may also begin a break up) N
(      of transmitted data into smaller and smaller segments.  If a) N
(      segment containing a single data octet sent to probe a zero window) N
(      is accepted, it consumes one octet of the window now available.) N
(      If the sending TCP simply sends as much as it can whenever the) N
(      window is non zero, the transmitted data will be broken into) N
(      alternating big and small segments.  As time goes on, occasional) N
(      pauses in the receiver making window allocation available will) N
() N
() N
(                                                               [Page 43]) N
() N
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
(                                                          September 1981) N
(Transmission Control Protocol) N
(Functional Specification) N
() N
() N
() N
(      result in breaking the big segments into a small and not quite so) N
(      big pair. And after a while the data transmission will be in) N
(      mostly small segments.) N
() N
(      The suggestion here is that the TCP implementations need to) N
(      actively attempt to combine small window allocations into larger) N
(      windows, since the mechanisms for managing the window tend to lead) N
(      to many small windows in the simplest minded implementations.) N
() N
(3.8.  Interfaces) N
() N
(  There are of course two interfaces of concern:  the user/TCP interface) N
(  and the TCP/lower-level interface.  We have a fairly elaborate model) N
(  of the user/TCP interface, but the interface to the lower level) N
(  protocol module is left unspecified here, since it will be specified) N
(  in detail by the specification of the lowel level protocol.  For the) N
(  case that the lower level is IP we note some of the parameter values) N
(  that TCPs might use.) N
() N
(  User/TCP Interface) N
() N
(    The following functional description of user commands to the TCP is,) N
(    at best, fictional, since every operating system will have different) N
(    facilities.  Consequently, we must warn readers that different TCP) N
(    implementations may have different user interfaces.  However, all) N
(    TCPs must provide a certain minimum set of services to guarantee) N
(    that all TCP implementations can support the same protocol) N
(    hierarchy.  This section specifies the functional interfaces) N
(    required of all TCP implementations.) N
() N
(    TCP User Commands) N
() N
(      The following sections functionally characterize a USER/TCP) N
(      interface.  The notation used is similar to most procedure or) N
(      function calls in high level languages, but this usage is not) N
(      meant to rule out trap type service calls \(e.g., SVCs, UUOs,) N
(      EMTs\).) N
() N
(      The user commands described below specify the basic functions the) N
(      TCP must perform to support interprocess communication.) N
(      Individual implementations must define their own exact format, and) N
(      may provide combinations or subsets of the basic functions in) N
(      single calls.  In particular, some implementations may wish to) N
(      automatically OPEN a connection on the first SEND or RECEIVE) N
(      issued by the user for a given connection.) N
() N
() N
() N
() N
() N
([Page 44]                                                               ) N
() N
border
grestore
end % of iso1dict
pagesave restore
showpage
%%Page: (51-52) 26
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
(September 1981                                                          ) N
(                                           Transmission Control Protocol) N
(                                                Functional Specification) N
() N
() N
() N
(      In providing interprocess communication facilities, the TCP must) N
(      not only accept commands, but must also return information to the) N
(      processes it serves.  The latter consists of:) N
() N
(        \(a\) general information about a connection \(e.g., interrupts,) N
(        remote close, binding of unspecified foreign socket\).) N
() N
(        \(b\) replies to specific user commands indicating success or) N
(        various types of failure.) N
() N
(      Open) N
() N
(        Format:  OPEN \(local port, foreign socket, active/passive) N
(        [, timeout] [, precedence] [, security/compartment] [, options]\)) N
(        -> local connection name) N
() N
(        We assume that the local TCP is aware of the identity of the) N
(        processes it serves and will check the authority of the process) N
(        to use the connection specified.  Depending upon the) N
(        implementation of the TCP, the local network and TCP identifiers) N
(        for the source address will either be supplied by the TCP or the) N
(        lower level protocol \(e.g., IP\).  These considerations are the) N
(        result of concern about security, to the extent that no TCP be) N
(        able to masquerade as another one, and so on.  Similarly, no) N
(        process can masquerade as another without the collusion of the) N
(        TCP.) N
() N
(        If the active/passive flag is set to passive, then this is a) N
(        call to LISTEN for an incoming connection.  A passive open may) N
(        have either a fully specified foreign socket to wait for a) N
(        particular connection or an unspecified foreign socket to wait) N
(        for any call.  A fully specified passive call can be made active) N
(        by the subsequent execution of a SEND.) N
() N
(        A transmission control block \(TCB\) is created and partially) N
(        filled in with data from the OPEN command parameters.) N
() N
(        On an active OPEN command, the TCP will begin the procedure to) N
(        synchronize \(i.e., establish\) the connection at once.) N
() N
(        The timeout, if present, permits the caller to set up a timeout) N
(        for all data submitted to TCP.  If data is not successfully) N
(        delivered to the destination within the timeout period, the TCP) N
(        will abort the connection.  The present global default is five) N
(        minutes.) N
() N
(        The TCP or some component of the operating system will verify) N
(        the users authority to open a connection with the specified) N
() N
() N
(                                                               [Page 45]) N
() N
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
(                                                          September 1981) N
(Transmission Control Protocol) N
(Functional Specification) N
() N
() N
() N
(        precedence or security/compartment.  The absence of precedence) N
(        or security/compartment specification in the OPEN call indicates) N
(        the default values must be used.) N
() N
(        TCP will accept incoming requests as matching only if the) N
(        security/compartment information is exactly the same and only if) N
(        the precedence is equal to or higher than the precedence) N
(        requested in the OPEN call.) N
() N
(        The precedence for the connection is the higher of the values) N
(        requested in the OPEN call and received from the incoming) N
(        request, and fixed at that value for the life of the) N
(        connection.Implementers may want to give the user control of) N
(        this precedence negotiation.  For example, the user might be) N
(        allowed to specify that the precedence must be exactly matched,) N
(        or that any attempt to raise the precedence be confirmed by the) N
(        user.) N
() N
(        A local connection name will be returned to the user by the TCP.) N
(        The local connection name can then be used as a short hand term) N
(        for the connection defined by the <local socket, foreign socket>) N
(        pair.) N
() N
(      Send) N
() N
(        Format:  SEND \(local connection name, buffer address, byte) N
(        count, PUSH flag, URGENT flag [,timeout]\)) N
() N
(        This call causes the data contained in the indicated user buffer) N
(        to be sent on the indicated connection.  If the connection has) N
(        not been opened, the SEND is considered an error.  Some) N
(        implementations may allow users to SEND first; in which case, an) N
(        automatic OPEN would be done.  If the calling process is not) N
(        authorized to use this connection, an error is returned.) N
() N
(        If the PUSH flag is set, the data must be transmitted promptly) N
(        to the receiver, and the PUSH bit will be set in the last TCP) N
(        segment created from the buffer.  If the PUSH flag is not set,) N
(        the data may be combined with data from subsequent SENDs for) N
(        transmission efficiency.) N
() N
(        If the URGENT flag is set, segments sent to the destination TCP) N
(        will have the urgent pointer set.  The receiving TCP will signal) N
(        the urgent condition to the receiving process if the urgent) N
(        pointer indicates that data preceding the urgent pointer has not) N
(        been consumed by the receiving process.  The purpose of urgent) N
(        is to stimulate the receiver to process the urgent data and to) N
(        indicate to the receiver when all the currently known urgent) N
() N
() N
([Page 46]                                                               ) N
() N
border
grestore
end % of iso1dict
pagesave restore
showpage
%%Page: (53-54) 27
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
(September 1981                                                          ) N
(                                           Transmission Control Protocol) N
(                                                Functional Specification) N
() N
() N
() N
(        data has been received.  The number of times the sending user's) N
(        TCP signals urgent will not necessarily be equal to the number) N
(        of times the receiving user will be notified of the presence of) N
(        urgent data.) N
() N
(        If no foreign socket was specified in the OPEN, but the) N
(        connection is established \(e.g., because a LISTENing connection) N
(        has become specific due to a foreign segment arriving for the) N
(        local socket\), then the designated buffer is sent to the implied) N
(        foreign socket.  Users who make use of OPEN with an unspecified) N
(        foreign socket can make use of SEND without ever explicitly) N
(        knowing the foreign socket address.) N
() N
(        However, if a SEND is attempted before the foreign socket) N
(        becomes specified, an error will be returned.  Users can use the) N
(        STATUS call to determine the status of the connection.  In some) N
(        implementations the TCP may notify the user when an unspecified) N
(        socket is bound.) N
() N
(        If a timeout is specified, the current user timeout for this) N
(        connection is changed to the new one.) N
() N
(        In the simplest implementation, SEND would not return control to) N
(        the sending process until either the transmission was complete) N
(        or the timeout had been exceeded.  However, this simple method) N
(        is both subject to deadlocks \(for example, both sides of the) N
(        connection might try to do SENDs before doing any RECEIVEs\) and) N
(        offers poor performance, so it is not recommended.  A more) N
(        sophisticated implementation would return immediately to allow) N
(        the process to run concurrently with network I/O, and,) N
(        furthermore, to allow multiple SENDs to be in progress.) N
(        Multiple SENDs are served in first come, first served order, so) N
(        the TCP will queue those it cannot service immediately.) N
() N
(        We have implicitly assumed an asynchronous user interface in) N
(        which a SEND later elicits some kind of SIGNAL or) N
(        pseudo-interrupt from the serving TCP.  An alternative is to) N
(        return a response immediately.  For instance, SENDs might return) N
(        immediate local acknowledgment, even if the segment sent had not) N
(        been acknowledged by the distant TCP.  We could optimistically) N
(        assume eventual success.  If we are wrong, the connection will) N
(        close anyway due to the timeout.  In implementations of this) N
(        kind \(synchronous\), there will still be some asynchronous) N
(        signals, but these will deal with the connection itself, and not) N
(        with specific segments or buffers.) N
() N
(        In order for the process to distinguish among error or success) N
(        indications for different SENDs, it might be appropriate for the) N
() N
() N
(                                                               [Page 47]) N
() N
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
(                                                          September 1981) N
(Transmission Control Protocol) N
(Functional Specification) N
() N
() N
() N
(        buffer address to be returned along with the coded response to) N
(        the SEND request.  TCP-to-user signals are discussed below,) N
(        indicating the information which should be returned to the) N
(        calling process.) N
() N
(      Receive) N
() N
(        Format:  RECEIVE \(local connection name, buffer address, byte) N
(        count\) -> byte count, urgent flag, push flag) N
() N
(        This command allocates a receiving buffer associated with the) N
(        specified connection.  If no OPEN precedes this command or the) N
(        calling process is not authorized to use this connection, an) N
(        error is returned.) N
() N
(        In the simplest implementation, control would not return to the) N
(        calling program until either the buffer was filled, or some) N
(        error occurred, but this scheme is highly subject to deadlocks.) N
(        A more sophisticated implementation would permit several) N
(        RECEIVEs to be outstanding at once.  These would be filled as) N
(        segments arrive.  This strategy permits increased throughput at) N
(        the cost of a more elaborate scheme \(possibly asynchronous\) to) N
(        notify the calling program that a PUSH has been seen or a buffer) N
(        filled.) N
() N
(        If enough data arrive to fill the buffer before a PUSH is seen,) N
(        the PUSH flag will not be set in the response to the RECEIVE.) N
(        The buffer will be filled with as much data as it can hold.  If) N
(        a PUSH is seen before the buffer is filled the buffer will be) N
(        returned partially filled and PUSH indicated.) N
() N
(        If there is urgent data the user will have been informed as soon) N
(        as it arrived via a TCP-to-user signal.  The receiving user) N
(        should thus be in "urgent mode".  If the URGENT flag is on,) N
(        additional urgent data remains.  If the URGENT flag is off, this) N
(        call to RECEIVE has returned all the urgent data, and the user) N
(        may now leave "urgent mode".  Note that data following the) N
(        urgent pointer \(non-urgent data\) cannot be delivered to the user) N
(        in the same buffer with preceeding urgent data unless the) N
(        boundary is clearly marked for the user.) N
() N
(        To distinguish among several outstanding RECEIVEs and to take) N
(        care of the case that a buffer is not completely filled, the) N
(        return code is accompanied by both a buffer pointer and a byte) N
(        count indicating the actual length of the data received.) N
() N
(        Alternative implementations of RECEIVE might have the TCP) N
() N
() N
() N
([Page 48]                                                               ) N
() N
border
grestore
end % of iso1dict
pagesave restore
showpage
%%Page: (55-56) 28
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
(September 1981                                                          ) N
(                                           Transmission Control Protocol) N
(                                                Functional Specification) N
() N
() N
() N
(        allocate buffer storage, or the TCP might share a ring buffer) N
(        with the user.) N
() N
(      Close) N
() N
(        Format:  CLOSE \(local connection name\)) N
() N
(        This command causes the connection specified to be closed.  If) N
(        the connection is not open or the calling process is not) N
(        authorized to use this connection, an error is returned.) N
(        Closing connections is intended to be a graceful operation in) N
(        the sense that outstanding SENDs will be transmitted \(and) N
(        retransmitted\), as flow control permits, until all have been) N
(        serviced.  Thus, it should be acceptable to make several SEND) N
(        calls, followed by a CLOSE, and expect all the data to be sent) N
(        to the destination.  It should also be clear that users should) N
(        continue to RECEIVE on CLOSING connections, since the other side) N
(        may be trying to transmit the last of its data.  Thus, CLOSE) N
(        means "I have no more to send" but does not mean "I will not) N
(        receive any more."  It may happen \(if the user level protocol is) N
(        not well thought out\) that the closing side is unable to get rid) N
(        of all its data before timing out.  In this event, CLOSE turns) N
(        into ABORT, and the closing TCP gives up.) N
() N
(        The user may CLOSE the connection at any time on his own) N
(        initiative, or in response to various prompts from the TCP) N
(        \(e.g., remote close executed, transmission timeout exceeded,) N
(        destination inaccessible\).) N
() N
(        Because closing a connection requires communication with the) N
(        foreign TCP, connections may remain in the closing state for a) N
(        short time.  Attempts to reopen the connection before the TCP) N
(        replies to the CLOSE command will result in error responses.) N
() N
(        Close also implies push function.) N
() N
(      Status) N
() N
(        Format:  STATUS \(local connection name\) -> status data) N
() N
(        This is an implementation dependent user command and could be) N
(        excluded without adverse effect.  Information returned would) N
(        typically come from the TCB associated with the connection.) N
() N
(        This command returns a data block containing the following) N
(        information:) N
() N
(          local socket,) N
() N
() N
(                                                               [Page 49]) N
() N
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
(                                                          September 1981) N
(Transmission Control Protocol) N
(Functional Specification) N
() N
() N
() N
(          foreign socket,) N
(          local connection name,) N
(          receive window,) N
(          send window,) N
(          connection state,) N
(          number of buffers awaiting acknowledgment,) N
(          number of buffers pending receipt,) N
(          urgent state,) N
(          precedence,) N
(          security/compartment,) N
(          and transmission timeout.) N
() N
(        Depending on the state of the connection, or on the) N
(        implementation itself, some of this information may not be) N
(        available or meaningful.  If the calling process is not) N
(        authorized to use this connection, an error is returned.  This) N
(        prevents unauthorized processes from gaining information about a) N
(        connection.) N
() N
(      Abort) N
() N
(        Format:  ABORT \(local connection name\)) N
() N
(        This command causes all pending SENDs and RECEIVES to be) N
(        aborted, the TCB to be removed, and a special RESET message to) N
(        be sent to the TCP on the other side of the connection.) N
(        Depending on the implementation, users may receive abort) N
(        indications for each outstanding SEND or RECEIVE, or may simply) N
(        receive an ABORT-acknowledgment.) N
() N
(    TCP-to-User Messages) N
() N
(      It is assumed that the operating system environment provides a) N
(      means for the TCP to asynchronously signal the user program.  When) N
(      the TCP does signal a user program, certain information is passed) N
(      to the user.  Often in the specification the information will be) N
(      an error message.  In other cases there will be information) N
(      relating to the completion of processing a SEND or RECEIVE or) N
(      other user call.) N
() N
(      The following information is provided:) N
() N
(        Local Connection Name                    Always) N
(        Response String                          Always) N
(        Buffer Address                           Send & Receive) N
(        Byte count \(counts bytes received\)       Receive) N
(        Push flag                                Receive) N
(        Urgent flag                              Receive) N
() N
() N
([Page 50]                                                               ) N
() N
border
grestore
end % of iso1dict
pagesave restore
showpage
%%Page: (57-58) 29
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
(September 1981                                                          ) N
(                                           Transmission Control Protocol) N
(                                                Functional Specification) N
() N
() N
() N
(  TCP/Lower-Level Interface) N
() N
(    The TCP calls on a lower level protocol module to actually send and) N
(    receive information over a network.  One case is that of the ARPA) N
(    internetwork system where the lower level module is the Internet) N
(    Protocol \(IP\) [2].) N
() N
(    If the lower level protocol is IP it provides arguments for a type) N
(    of service and for a time to live.  TCP uses the following settings) N
(    for these parameters:) N
() N
(      Type of Service = Precedence: routine, Delay: normal, Throughput:) N
(      normal, Reliability: normal; or 00000000.) N
() N
(      Time to Live    = one minute, or 00111100.) N
() N
(        Note that the assumed maximum segment lifetime is two minutes.) N
(        Here we explicitly ask that a segment be destroyed if it cannot) N
(        be delivered by the internet system within one minute.) N
() N
(    If the lower level is IP \(or other protocol that provides this) N
(    feature\) and source routing is used, the interface must allow the) N
(    route information to be communicated.  This is especially important) N
(    so that the source and destination addresses used in the TCP) N
(    checksum be the originating source and ultimate destination. It is) N
(    also important to preserve the return route to answer connection) N
(    requests.) N
() N
(    Any lower level protocol will have to provide the source address,) N
(    destination address, and protocol fields, and some way to determine) N
(    the "TCP length", both to provide the functional equivlent service) N
(    of IP and to be used in the TCP checksum.) N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
(                                                               [Page 51]) N
() N
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
(                                                          September 1981) N
(Transmission Control Protocol) N
(Functional Specification) N
() N
() N
() N
(3.9.  Event Processing) N
() N
(  The processing depicted in this section is an example of one possible) N
(  implementation.  Other implementations may have slightly different) N
(  processing sequences, but they should differ from those in this) N
(  section only in detail, not in substance.) N
() N
(  The activity of the TCP can be characterized as responding to events.) N
(  The events that occur can be cast into three categories:  user calls,) N
(  arriving segments, and timeouts.  This section describes the) N
(  processing the TCP does in response to each of the events.  In many) N
(  cases the processing required depends on the state of the connection.) N
() N
(    Events that occur:) N
() N
(      User Calls) N
() N
(        OPEN) N
(        SEND) N
(        RECEIVE) N
(        CLOSE) N
(        ABORT) N
(        STATUS) N
() N
(      Arriving Segments) N
() N
(        SEGMENT ARRIVES) N
() N
(      Timeouts) N
() N
(        USER TIMEOUT) N
(        RETRANSMISSION TIMEOUT) N
(        TIME-WAIT TIMEOUT) N
() N
(  The model of the TCP/user interface is that user commands receive an) N
(  immediate return and possibly a delayed response via an event or) N
(  pseudo interrupt.  In the following descriptions, the term "signal") N
(  means cause a delayed response.) N
() N
(  Error responses are given as character strings.  For example, user) N
(  commands referencing connections that do not exist receive "error:) N
(  connection not open".) N
() N
(  Please note in the following that all arithmetic on sequence numbers,) N
(  acknowledgment numbers, windows, et cetera, is modulo 2**32 the size) N
(  of the sequence number space.  Also note that "=<" means less than or) N
(  equal to \(modulo 2**32\).) N
() N
() N
() N
([Page 52]                                                               ) N
() N
border
grestore
end % of iso1dict
pagesave restore
showpage
%%Page: (59-60) 30
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
(September 1981                                                          ) N
(                                           Transmission Control Protocol) N
(                                                Functional Specification) N
() N
() N
() N
(  A natural way to think about processing incoming segments is to) N
(  imagine that they are first tested for proper sequence number \(i.e.,) N
(  that their contents lie in the range of the expected "receive window") N
(  in the sequence number space\) and then that they are generally queued) N
(  and processed in sequence number order.) N
() N
(  When a segment overlaps other already received segments we reconstruct) N
(  the segment to contain just the new data, and adjust the header fields) N
(  to be consistent.) N
() N
(  Note that if no state change is mentioned the TCP stays in the same) N
(  state.) N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
(                                                               [Page 53]) N
() N
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
(                                                          September 1981) N
(Transmission Control Protocol) N
(Functional Specification) N
(                                                               OPEN Call) N
() N
() N
() N
(  OPEN Call) N
() N
(    CLOSED STATE \(i.e., TCB does not exist\)) N
() N
(      Create a new transmission control block \(TCB\) to hold connection) N
(      state information.  Fill in local socket identifier, foreign) N
(      socket, precedence, security/compartment, and user timeout) N
(      information.  Note that some parts of the foreign socket may be) N
(      unspecified in a passive OPEN and are to be filled in by the) N
(      parameters of the incoming SYN segment.  Verify the security and) N
(      precedence requested are allowed for this user, if not return) N
(      "error:  precedence not allowed" or "error:  security/compartment) N
(      not allowed."  If passive enter the LISTEN state and return.  If) N
(      active and the foreign socket is unspecified, return "error:) N
(      foreign socket unspecified"; if active and the foreign socket is) N
(      specified, issue a SYN segment.  An initial send sequence number) N
(      \(ISS\) is selected.  A SYN segment of the form <SEQ=ISS><CTL=SYN>) N
(      is sent.  Set SND.UNA to ISS, SND.NXT to ISS+1, enter SYN-SENT) N
(      state, and return.) N
() N
(      If the caller does not have access to the local socket specified,) N
(      return "error:  connection illegal for this process".  If there is) N
(      no room to create a new connection, return "error:  insufficient) N
(      resources".) N
() N
(    LISTEN STATE) N
() N
(      If active and the foreign socket is specified, then change the) N
(      connection from passive to active, select an ISS.  Send a SYN) N
(      segment, set SND.UNA to ISS, SND.NXT to ISS+1.  Enter SYN-SENT) N
(      state.  Data associated with SEND may be sent with SYN segment or) N
(      queued for transmission after entering ESTABLISHED state.  The) N
(      urgent bit if requested in the command must be sent with the data) N
(      segments sent as a result of this command.  If there is no room to) N
(      queue the request, respond with "error:  insufficient resources".) N
(      If Foreign socket was not specified, then return "error:  foreign) N
(      socket unspecified".) N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
([Page 54]                                                               ) N
() N
border
grestore
end % of iso1dict
pagesave restore
showpage
%%Page: (61-62) 31
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
(September 1981                                                          ) N
(                                           Transmission Control Protocol) N
(                                                Functional Specification) N
(OPEN Call) N
() N
() N
() N
(    SYN-SENT STATE) N
(    SYN-RECEIVED STATE) N
(    ESTABLISHED STATE) N
(    FIN-WAIT-1 STATE) N
(    FIN-WAIT-2 STATE) N
(    CLOSE-WAIT STATE) N
(    CLOSING STATE) N
(    LAST-ACK STATE) N
(    TIME-WAIT STATE) N
() N
(      Return "error:  connection already exists".) N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
(                                                               [Page 55]) N
() N
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
(                                                          September 1981) N
(Transmission Control Protocol) N
(Functional Specification) N
(                                                               SEND Call) N
() N
() N
() N
(  SEND Call) N
() N
(    CLOSED STATE \(i.e., TCB does not exist\)) N
() N
(      If the user does not have access to such a connection, then return) N
(      "error:  connection illegal for this process".) N
() N
(      Otherwise, return "error:  connection does not exist".) N
() N
(    LISTEN STATE) N
() N
(      If the foreign socket is specified, then change the connection) N
(      from passive to active, select an ISS.  Send a SYN segment, set) N
(      SND.UNA to ISS, SND.NXT to ISS+1.  Enter SYN-SENT state.  Data) N
(      associated with SEND may be sent with SYN segment or queued for) N
(      transmission after entering ESTABLISHED state.  The urgent bit if) N
(      requested in the command must be sent with the data segments sent) N
(      as a result of this command.  If there is no room to queue the) N
(      request, respond with "error:  insufficient resources".  If) N
(      Foreign socket was not specified, then return "error:  foreign) N
(      socket unspecified".) N
() N
(    SYN-SENT STATE) N
(    SYN-RECEIVED STATE) N
() N
(      Queue the data for transmission after entering ESTABLISHED state.) N
(      If no space to queue, respond with "error:  insufficient) N
(      resources".) N
() N
(    ESTABLISHED STATE) N
(    CLOSE-WAIT STATE) N
() N
(      Segmentize the buffer and send it with a piggybacked) N
(      acknowledgment \(acknowledgment value = RCV.NXT\).  If there is) N
(      insufficient space to remember this buffer, simply return "error:) N
(      insufficient resources".) N
() N
(      If the urgent flag is set, then SND.UP <- SND.NXT-1 and set the) N
(      urgent pointer in the outgoing segments.) N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
([Page 56]                                                               ) N
() N
border
grestore
end % of iso1dict
pagesave restore
showpage
%%Page: (63-64) 32
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
(September 1981                                                          ) N
(                                           Transmission Control Protocol) N
(                                                Functional Specification) N
(SEND Call) N
() N
() N
() N
(    FIN-WAIT-1 STATE) N
(    FIN-WAIT-2 STATE) N
(    CLOSING STATE) N
(    LAST-ACK STATE) N
(    TIME-WAIT STATE) N
() N
(      Return "error:  connection closing" and do not service request.) N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
(                                                               [Page 57]) N
() N
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
(                                                          September 1981) N
(Transmission Control Protocol) N
(Functional Specification) N
(                                                            RECEIVE Call) N
() N
() N
() N
(  RECEIVE Call) N
() N
(    CLOSED STATE \(i.e., TCB does not exist\)) N
() N
(      If the user does not have access to such a connection, return) N
(      "error:  connection illegal for this process".) N
() N
(      Otherwise return "error:  connection does not exist".) N
() N
(    LISTEN STATE) N
(    SYN-SENT STATE) N
(    SYN-RECEIVED STATE) N
() N
(      Queue for processing after entering ESTABLISHED state.  If there) N
(      is no room to queue this request, respond with "error:) N
(      insufficient resources".) N
() N
(    ESTABLISHED STATE) N
(    FIN-WAIT-1 STATE) N
(    FIN-WAIT-2 STATE) N
() N
(      If insufficient incoming segments are queued to satisfy the) N
(      request, queue the request.  If there is no queue space to) N
(      remember the RECEIVE, respond with "error:  insufficient) N
(      resources".) N
() N
(      Reassemble queued incoming segments into receive buffer and return) N
(      to user.  Mark "push seen" \(PUSH\) if this is the case.) N
() N
(      If RCV.UP is in advance of the data currently being passed to the) N
(      user notify the user of the presence of urgent data.) N
() N
(      When the TCP takes responsibility for delivering data to the user) N
(      that fact must be communicated to the sender via an) N
(      acknowledgment.  The formation of such an acknowledgment is) N
(      described below in the discussion of processing an incoming) N
(      segment.) N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
([Page 58]                                                               ) N
() N
border
grestore
end % of iso1dict
pagesave restore
showpage
%%Page: (65-66) 33
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
(September 1981                                                          ) N
(                                           Transmission Control Protocol) N
(                                                Functional Specification) N
(RECEIVE Call) N
() N
() N
() N
(    CLOSE-WAIT STATE) N
() N
(      Since the remote side has already sent FIN, RECEIVEs must be) N
(      satisfied by text already on hand, but not yet delivered to the) N
(      user.  If no text is awaiting delivery, the RECEIVE will get a) N
(      "error:  connection closing" response.  Otherwise, any remaining) N
(      text can be used to satisfy the RECEIVE.) N
() N
(    CLOSING STATE) N
(    LAST-ACK STATE) N
(    TIME-WAIT STATE) N
() N
(      Return "error:  connection closing".) N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
(                                                               [Page 59]) N
() N
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
(                                                          September 1981) N
(Transmission Control Protocol) N
(Functional Specification) N
(                                                              CLOSE Call) N
() N
() N
() N
(  CLOSE Call) N
() N
(    CLOSED STATE \(i.e., TCB does not exist\)) N
() N
(      If the user does not have access to such a connection, return) N
(      "error:  connection illegal for this process".) N
() N
(      Otherwise, return "error:  connection does not exist".) N
() N
(    LISTEN STATE) N
() N
(      Any outstanding RECEIVEs are returned with "error:  closing") N
(      responses.  Delete TCB, enter CLOSED state, and return.) N
() N
(    SYN-SENT STATE) N
() N
(      Delete the TCB and return "error:  closing" responses to any) N
(      queued SENDs, or RECEIVEs.) N
() N
(    SYN-RECEIVED STATE) N
() N
(      If no SENDs have been issued and there is no pending data to send,) N
(      then form a FIN segment and send it, and enter FIN-WAIT-1 state;) N
(      otherwise queue for processing after entering ESTABLISHED state.) N
() N
(    ESTABLISHED STATE) N
() N
(      Queue this until all preceding SENDs have been segmentized, then) N
(      form a FIN segment and send it.  In any case, enter FIN-WAIT-1) N
(      state.) N
() N
(    FIN-WAIT-1 STATE) N
(    FIN-WAIT-2 STATE) N
() N
(      Strictly speaking, this is an error and should receive a "error:) N
(      connection closing" response.  An "ok" response would be) N
(      acceptable, too, as long as a second FIN is not emitted \(the first) N
(      FIN may be retransmitted though\).) N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
([Page 60]                                                               ) N
() N
border
grestore
end % of iso1dict
pagesave restore
showpage
%%Page: (67-68) 34
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
(September 1981                                                          ) N
(                                           Transmission Control Protocol) N
(                                                Functional Specification) N
(CLOSE Call) N
() N
() N
() N
(    CLOSE-WAIT STATE) N
() N
(      Queue this request until all preceding SENDs have been) N
(      segmentized; then send a FIN segment, enter CLOSING state.) N
() N
(    CLOSING STATE) N
(    LAST-ACK STATE) N
(    TIME-WAIT STATE) N
() N
(      Respond with "error:  connection closing".) N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
(                                                               [Page 61]) N
() N
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
(                                                          September 1981) N
(Transmission Control Protocol) N
(Functional Specification) N
(                                                              ABORT Call) N
() N
() N
() N
(  ABORT Call) N
() N
(    CLOSED STATE \(i.e., TCB does not exist\)) N
() N
(      If the user should not have access to such a connection, return) N
(      "error:  connection illegal for this process".) N
() N
(      Otherwise return "error:  connection does not exist".) N
() N
(    LISTEN STATE) N
() N
(      Any outstanding RECEIVEs should be returned with "error:) N
(      connection reset" responses.  Delete TCB, enter CLOSED state, and) N
(      return.) N
() N
(    SYN-SENT STATE) N
() N
(      All queued SENDs and RECEIVEs should be given "connection reset") N
(      notification, delete the TCB, enter CLOSED state, and return.) N
() N
(    SYN-RECEIVED STATE) N
(    ESTABLISHED STATE) N
(    FIN-WAIT-1 STATE) N
(    FIN-WAIT-2 STATE) N
(    CLOSE-WAIT STATE) N
() N
(      Send a reset segment:) N
() N
(        <SEQ=SND.NXT><CTL=RST>) N
() N
(      All queued SENDs and RECEIVEs should be given "connection reset") N
(      notification; all segments queued for transmission \(except for the) N
(      RST formed above\) or retransmission should be flushed, delete the) N
(      TCB, enter CLOSED state, and return.) N
() N
(    CLOSING STATE) N
(    LAST-ACK STATE) N
(    TIME-WAIT STATE) N
() N
(      Respond with "ok" and delete the TCB, enter CLOSED state, and) N
(      return.) N
() N
() N
() N
() N
() N
() N
() N
() N
([Page 62]                                                               ) N
() N
border
grestore
end % of iso1dict
pagesave restore
showpage
%%Page: (69-70) 35
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
(September 1981                                                          ) N
(                                           Transmission Control Protocol) N
(                                                Functional Specification) N
(STATUS Call) N
() N
() N
() N
(  STATUS Call) N
() N
(    CLOSED STATE \(i.e., TCB does not exist\)) N
() N
(      If the user should not have access to such a connection, return) N
(      "error:  connection illegal for this process".) N
() N
(      Otherwise return "error:  connection does not exist".) N
() N
(    LISTEN STATE) N
() N
(      Return "state = LISTEN", and the TCB pointer.) N
() N
(    SYN-SENT STATE) N
() N
(      Return "state = SYN-SENT", and the TCB pointer.) N
() N
(    SYN-RECEIVED STATE) N
() N
(      Return "state = SYN-RECEIVED", and the TCB pointer.) N
() N
(    ESTABLISHED STATE) N
() N
(      Return "state = ESTABLISHED", and the TCB pointer.) N
() N
(    FIN-WAIT-1 STATE) N
() N
(      Return "state = FIN-WAIT-1", and the TCB pointer.) N
() N
(    FIN-WAIT-2 STATE) N
() N
(      Return "state = FIN-WAIT-2", and the TCB pointer.) N
() N
(    CLOSE-WAIT STATE) N
() N
(      Return "state = CLOSE-WAIT", and the TCB pointer.) N
() N
(    CLOSING STATE) N
() N
(      Return "state = CLOSING", and the TCB pointer.) N
() N
(    LAST-ACK STATE) N
() N
(      Return "state = LAST-ACK", and the TCB pointer.) N
() N
() N
() N
() N
() N
(                                                               [Page 63]) N
() N
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
(                                                          September 1981) N
(Transmission Control Protocol) N
(Functional Specification) N
(                                                             STATUS Call) N
() N
() N
() N
(    TIME-WAIT STATE) N
() N
(      Return "state = TIME-WAIT", and the TCB pointer.) N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
([Page 64]                                                               ) N
() N
border
grestore
end % of iso1dict
pagesave restore
showpage
%%Page: (71-72) 36
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
(September 1981                                                          ) N
(                                           Transmission Control Protocol) N
(                                                Functional Specification) N
(SEGMENT ARRIVES) N
() N
() N
() N
(  SEGMENT ARRIVES) N
() N
(    If the state is CLOSED \(i.e., TCB does not exist\) then) N
() N
(      all data in the incoming segment is discarded.  An incoming) N
(      segment containing a RST is discarded.  An incoming segment not) N
(      containing a RST causes a RST to be sent in response.  The) N
(      acknowledgment and sequence field values are selected to make the) N
(      reset sequence acceptable to the TCP that sent the offending) N
(      segment.) N
() N
(      If the ACK bit is off, sequence number zero is used,) N
() N
(        <SEQ=0><ACK=SEG.SEQ+SEG.LEN><CTL=RST,ACK>) N
() N
(      If the ACK bit is on,) N
() N
(        <SEQ=SEG.ACK><CTL=RST>) N
() N
(      Return.) N
() N
(    If the state is LISTEN then) N
() N
(      first check for an RST) N
() N
(        An incoming RST should be ignored.  Return.) N
() N
(      second check for an ACK) N
() N
(        Any acknowledgment is bad if it arrives on a connection still in) N
(        the LISTEN state.  An acceptable reset segment should be formed) N
(        for any arriving ACK-bearing segment.  The RST should be) N
(        formatted as follows:) N
() N
(          <SEQ=SEG.ACK><CTL=RST>) N
() N
(        Return.) N
() N
(      third check for a SYN) N
() N
(        If the SYN bit is set, check the security.  If the) N
(        security/compartment on the incoming segment does not exactly) N
(        match the security/compartment in the TCB then send a reset and) N
(        return.) N
() N
(          <SEQ=SEG.ACK><CTL=RST>) N
() N
() N
() N
(                                                               [Page 65]) N
() N
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
(                                                          September 1981) N
(Transmission Control Protocol) N
(Functional Specification) N
(                                                         SEGMENT ARRIVES) N
() N
() N
() N
(        If the SEG.PRC is greater than the TCB.PRC then if allowed by) N
(        the user and the system set TCB.PRC<-SEG.PRC, if not allowed) N
(        send a reset and return.) N
() N
(          <SEQ=SEG.ACK><CTL=RST>) N
() N
(        If the SEG.PRC is less than the TCB.PRC then continue.) N
() N
(        Set RCV.NXT to SEG.SEQ+1, IRS is set to SEG.SEQ and any other) N
(        control or text should be queued for processing later.  ISS) N
(        should be selected and a SYN segment sent of the form:) N
() N
(          <SEQ=ISS><ACK=RCV.NXT><CTL=SYN,ACK>) N
() N
(        SND.NXT is set to ISS+1 and SND.UNA to ISS.  The connection) N
(        state should be changed to SYN-RECEIVED.  Note that any other) N
(        incoming control or data \(combined with SYN\) will be processed) N
(        in the SYN-RECEIVED state, but processing of SYN and ACK should) N
(        not be repeated.  If the listen was not fully specified \(i.e.,) N
(        the foreign socket was not fully specified\), then the) N
(        unspecified fields should be filled in now.) N
() N
(      fourth other text or control) N
() N
(        Any other control or text-bearing segment \(not containing SYN\)) N
(        must have an ACK and thus would be discarded by the ACK) N
(        processing.  An incoming RST segment could not be valid, since) N
(        it could not have been sent in response to anything sent by this) N
(        incarnation of the connection.  So you are unlikely to get here,) N
(        but if you do, drop the segment, and return.) N
() N
(    If the state is SYN-SENT then) N
() N
(      first check the ACK bit) N
() N
(        If the ACK bit is set) N
() N
(          If SEG.ACK =< ISS, or SEG.ACK > SND.NXT, send a reset \(unless) N
(          the RST bit is set, if so drop the segment and return\)) N
() N
(            <SEQ=SEG.ACK><CTL=RST>) N
() N
(          and discard the segment.  Return.) N
() N
(          If SND.UNA =< SEG.ACK =< SND.NXT then the ACK is acceptable.) N
() N
(      second check the RST bit) N
() N
() N
([Page 66]                                                               ) N
() N
border
grestore
end % of iso1dict
pagesave restore
showpage
%%Page: (73-74) 37
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
(September 1981                                                          ) N
(                                           Transmission Control Protocol) N
(                                                Functional Specification) N
(SEGMENT ARRIVES) N
() N
() N
() N
(        If the RST bit is set) N
() N
(          If the ACK was acceptable then signal the user "error:) N
(          connection reset", drop the segment, enter CLOSED state,) N
(          delete TCB, and return.  Otherwise \(no ACK\) drop the segment) N
(          and return.) N
() N
(      third check the security and precedence) N
() N
(        If the security/compartment in the segment does not exactly) N
(        match the security/compartment in the TCB, send a reset) N
() N
(          If there is an ACK) N
() N
(            <SEQ=SEG.ACK><CTL=RST>) N
() N
(          Otherwise) N
() N
(            <SEQ=0><ACK=SEG.SEQ+SEG.LEN><CTL=RST,ACK>) N
() N
(        If there is an ACK) N
() N
(          The precedence in the segment must match the precedence in the) N
(          TCB, if not, send a reset) N
() N
(            <SEQ=SEG.ACK><CTL=RST>) N
() N
(        If there is no ACK) N
() N
(          If the precedence in the segment is higher than the precedence) N
(          in the TCB then if allowed by the user and the system raise) N
(          the precedence in the TCB to that in the segment, if not) N
(          allowed to raise the prec then send a reset.) N
() N
(            <SEQ=0><ACK=SEG.SEQ+SEG.LEN><CTL=RST,ACK>) N
() N
(          If the precedence in the segment is lower than the precedence) N
(          in the TCB continue.) N
() N
(        If a reset was sent, discard the segment and return.) N
() N
(      fourth check the SYN bit) N
() N
(        This step should be reached only if the ACK is ok, or there is) N
(        no ACK, and it the segment did not contain a RST.) N
() N
(        If the SYN bit is on and the security/compartment and precedence) N
() N
() N
(                                                               [Page 67]) N
() N
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
(                                                          September 1981) N
(Transmission Control Protocol) N
(Functional Specification) N
(                                                         SEGMENT ARRIVES) N
() N
() N
() N
(        are acceptable then, RCV.NXT is set to SEG.SEQ+1, IRS is set to) N
(        SEG.SEQ.  SND.UNA should be advanced to equal SEG.ACK \(if there) N
(        is an ACK\), and any segments on the retransmission queue which) N
(        are thereby acknowledged should be removed.) N
() N
(        If SND.UNA > ISS \(our SYN has been ACKed\), change the connection) N
(        state to ESTABLISHED, form an ACK segment) N
() N
(          <SEQ=SND.NXT><ACK=RCV.NXT><CTL=ACK>) N
() N
(        and send it.  Data or controls which were queued for) N
(        transmission may be included.  If there are other controls or) N
(        text in the segment then continue processing at the sixth step) N
(        below where the URG bit is checked, otherwise return.) N
() N
(        Otherwise enter SYN-RECEIVED, form a SYN,ACK segment) N
() N
(          <SEQ=ISS><ACK=RCV.NXT><CTL=SYN,ACK>) N
() N
(        and send it.  If there are other controls or text in the) N
(        segment, queue them for processing after the ESTABLISHED state) N
(        has been reached, return.) N
() N
(      fifth, if neither of the SYN or RST bits is set then drop the) N
(      segment and return.) N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
([Page 68]                                                               ) N
() N
border
grestore
end % of iso1dict
pagesave restore
showpage
%%Page: (75-76) 38
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
(September 1981                                                          ) N
(                                           Transmission Control Protocol) N
(                                                Functional Specification) N
(SEGMENT ARRIVES) N
() N
() N
() N
(    Otherwise,) N
() N
(    first check sequence number) N
() N
(      SYN-RECEIVED STATE) N
(      ESTABLISHED STATE) N
(      FIN-WAIT-1 STATE) N
(      FIN-WAIT-2 STATE) N
(      CLOSE-WAIT STATE) N
(      CLOSING STATE) N
(      LAST-ACK STATE) N
(      TIME-WAIT STATE) N
() N
(        Segments are processed in sequence.  Initial tests on arrival) N
(        are used to discard old duplicates, but further processing is) N
(        done in SEG.SEQ order.  If a segment's contents straddle the) N
(        boundary between old and new, only the new parts should be) N
(        processed.) N
() N
(        There are four cases for the acceptability test for an incoming) N
(        segment:) N
() N
(        Segment Receive  Test) N
(        Length  Window) N
(        ------- -------  -------------------------------------------) N
() N
(           0       0     SEG.SEQ = RCV.NXT) N
() N
(           0      >0     RCV.NXT =< SEG.SEQ < RCV.NXT+RCV.WND) N
() N
(          >0       0     not acceptable) N
() N
(          >0      >0     RCV.NXT =< SEG.SEQ < RCV.NXT+RCV.WND) N
(                      or RCV.NXT =< SEG.SEQ+SEG.LEN-1 < RCV.NXT+RCV.WND) N
() N
(        If the RCV.WND is zero, no segments will be acceptable, but) N
(        special allowance should be made to accept valid ACKs, URGs and) N
(        RSTs.) N
() N
(        If an incoming segment is not acceptable, an acknowledgment) N
(        should be sent in reply \(unless the RST bit is set, if so drop) N
(        the segment and return\):) N
() N
(          <SEQ=SND.NXT><ACK=RCV.NXT><CTL=ACK>) N
() N
(        After sending the acknowledgment, drop the unacceptable segment) N
(        and return.) N
() N
() N
(                                                               [Page 69]) N
() N
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
(                                                          September 1981) N
(Transmission Control Protocol) N
(Functional Specification) N
(                                                         SEGMENT ARRIVES) N
() N
() N
() N
(        In the following it is assumed that the segment is the idealized) N
(        segment that begins at RCV.NXT and does not exceed the window.) N
(        One could tailor actual segments to fit this assumption by) N
(        trimming off any portions that lie outside the window \(including) N
(        SYN and FIN\), and only processing further if the segment then) N
(        begins at RCV.NXT.  Segments with higher begining sequence) N
(        numbers may be held for later processing.) N
() N
(    second check the RST bit,) N
() N
(      SYN-RECEIVED STATE) N
() N
(        If the RST bit is set) N
() N
(          If this connection was initiated with a passive OPEN \(i.e.,) N
(          came from the LISTEN state\), then return this connection to) N
(          LISTEN state and return.  The user need not be informed.  If) N
(          this connection was initiated with an active OPEN \(i.e., came) N
(          from SYN-SENT state\) then the connection was refused, signal) N
(          the user "connection refused".  In either case, all segments) N
(          on the retransmission queue should be removed.  And in the) N
(          active OPEN case, enter the CLOSED state and delete the TCB,) N
(          and return.) N
() N
(      ESTABLISHED) N
(      FIN-WAIT-1) N
(      FIN-WAIT-2) N
(      CLOSE-WAIT) N
() N
(        If the RST bit is set then, any outstanding RECEIVEs and SEND) N
(        should receive "reset" responses.  All segment queues should be) N
(        flushed.  Users should also receive an unsolicited general) N
(        "connection reset" signal.  Enter the CLOSED state, delete the) N
(        TCB, and return.) N
() N
(      CLOSING STATE) N
(      LAST-ACK STATE) N
(      TIME-WAIT) N
() N
(        If the RST bit is set then, enter the CLOSED state, delete the) N
(        TCB, and return.) N
() N
() N
() N
() N
() N
() N
() N
() N
([Page 70]                                                               ) N
() N
border
grestore
end % of iso1dict
pagesave restore
showpage
%%Page: (77-78) 39
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
(September 1981                                                          ) N
(                                           Transmission Control Protocol) N
(                                                Functional Specification) N
(SEGMENT ARRIVES) N
() N
() N
() N
(    third check security and precedence) N
() N
(      SYN-RECEIVED) N
() N
(        If the security/compartment and precedence in the segment do not) N
(        exactly match the security/compartment and precedence in the TCB) N
(        then send a reset, and return.) N
() N
(      ESTABLISHED STATE) N
() N
(        If the security/compartment and precedence in the segment do not) N
(        exactly match the security/compartment and precedence in the TCB) N
(        then send a reset, any outstanding RECEIVEs and SEND should) N
(        receive "reset" responses.  All segment queues should be) N
(        flushed.  Users should also receive an unsolicited general) N
(        "connection reset" signal.  Enter the CLOSED state, delete the) N
(        TCB, and return.) N
() N
(      Note this check is placed following the sequence check to prevent) N
(      a segment from an old connection between these ports with a) N
(      different security or precedence from causing an abort of the) N
(      current connection.) N
() N
(    fourth, check the SYN bit,) N
() N
(      SYN-RECEIVED) N
(      ESTABLISHED STATE) N
(      FIN-WAIT STATE-1) N
(      FIN-WAIT STATE-2) N
(      CLOSE-WAIT STATE) N
(      CLOSING STATE) N
(      LAST-ACK STATE) N
(      TIME-WAIT STATE) N
() N
(        If the SYN is in the window it is an error, send a reset, any) N
(        outstanding RECEIVEs and SEND should receive "reset" responses,) N
(        all segment queues should be flushed, the user should also) N
(        receive an unsolicited general "connection reset" signal, enter) N
(        the CLOSED state, delete the TCB, and return.) N
() N
(        If the SYN is not in the window this step would not be reached) N
(        and an ack would have been sent in the first step \(sequence) N
(        number check\).) N
() N
() N
() N
() N
() N
() N
(                                                               [Page 71]) N
() N
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
(                                                          September 1981) N
(Transmission Control Protocol) N
(Functional Specification) N
(                                                         SEGMENT ARRIVES) N
() N
() N
() N
(    fifth check the ACK field,) N
() N
(      if the ACK bit is off drop the segment and return) N
() N
(      if the ACK bit is on) N
() N
(        SYN-RECEIVED STATE) N
() N
(          If SND.UNA =< SEG.ACK =< SND.NXT then enter ESTABLISHED state) N
(          and continue processing.) N
() N
(            If the segment acknowledgment is not acceptable, form a) N
(            reset segment,) N
() N
(              <SEQ=SEG.ACK><CTL=RST>) N
() N
(            and send it.) N
() N
(        ESTABLISHED STATE) N
() N
(          If SND.UNA < SEG.ACK =< SND.NXT then, set SND.UNA <- SEG.ACK.) N
(          Any segments on the retransmission queue which are thereby) N
(          entirely acknowledged are removed.  Users should receive) N
(          positive acknowledgments for buffers which have been SENT and) N
(          fully acknowledged \(i.e., SEND buffer should be returned with) N
(          "ok" response\).  If the ACK is a duplicate) N
(          \(SEG.ACK < SND.UNA\), it can be ignored.  If the ACK acks) N
(          something not yet sent \(SEG.ACK > SND.NXT\) then send an ACK,) N
(          drop the segment, and return.) N
() N
(          If SND.UNA < SEG.ACK =< SND.NXT, the send window should be) N
(          updated.  If \(SND.WL1 < SEG.SEQ or \(SND.WL1 = SEG.SEQ and) N
(          SND.WL2 =< SEG.ACK\)\), set SND.WND <- SEG.WND, set) N
(          SND.WL1 <- SEG.SEQ, and set SND.WL2 <- SEG.ACK.) N
() N
(          Note that SND.WND is an offset from SND.UNA, that SND.WL1) N
(          records the sequence number of the last segment used to update) N
(          SND.WND, and that SND.WL2 records the acknowledgment number of) N
(          the last segment used to update SND.WND.  The check here) N
(          prevents using old segments to update the window.) N
() N
() N
() N
() N
() N
() N
() N
() N
() N
([Page 72]                                                               ) N
() N
border
grestore
end % of iso1dict
pagesave restore
showpage
%%Page: (79-80) 40
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
(September 1981                                                          ) N
(                                           Transmission Control Protocol) N
(                                                Functional Specification) N
(SEGMENT ARRIVES) N
() N
() N
() N
(        FIN-WAIT-1 STATE) N
() N
(          In addition to the processing for the ESTABLISHED state, if) N
(          our FIN is now acknowledged then enter FIN-WAIT-2 and continue) N
(          processing in that state.) N
() N
(        FIN-WAIT-2 STATE) N
() N
(          In addition to the processing for the ESTABLISHED state, if) N
(          the retransmission queue is empty, the user's CLOSE can be) N
(          acknowledged \("ok"\) but do not delete the TCB.) N
() N
(        CLOSE-WAIT STATE) N
() N
(          Do the same processing as for the ESTABLISHED state.) N
() N
(        CLOSING STATE) N
() N
(          In addition to the processing for the ESTABLISHED state, if) N
(          the ACK acknowledges our FIN then enter the TIME-WAIT state,) N
(          otherwise ignore the segment.) N
() N
(        LAST-ACK STATE) N
() N
(          The only thing that can arrive in this state is an) N
(          acknowledgment of our FIN.  If our FIN is now acknowledged,) N
(          delete the TCB, enter the CLOSED state, and return.) N
() N
(        TIME-WAIT STATE) N
() N
(          The only thing that can arrive in this state is a) N
(          retransmission of the remote FIN.  Acknowledge it, and restart) N
(          the 2 MSL timeout.) N
() N
(    sixth, check the URG bit,) N
() N
(      ESTABLISHED STATE) N
(      FIN-WAIT-1 STATE) N
(      FIN-WAIT-2 STATE) N
() N
(        If the URG bit is set, RCV.UP <- max\(RCV.UP,SEG.UP\), and signal) N
(        the user that the remote side has urgent data if the urgent) N
(        pointer \(RCV.UP\) is in advance of the data consumed.  If the) N
(        user has already been signaled \(or is still in the "urgent) N
(        mode"\) for this continuous sequence of urgent data, do not) N
(        signal the user again.) N
() N
() N
() N
(                                                               [Page 73]) N
() N
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
(                                                          September 1981) N
(Transmission Control Protocol) N
(Functional Specification) N
(                                                         SEGMENT ARRIVES) N
() N
() N
() N
(      CLOSE-WAIT STATE) N
(      CLOSING STATE) N
(      LAST-ACK STATE) N
(      TIME-WAIT) N
() N
(        This should not occur, since a FIN has been received from the) N
(        remote side.  Ignore the URG.) N
() N
(    seventh, process the segment text,) N
() N
(      ESTABLISHED STATE) N
(      FIN-WAIT-1 STATE) N
(      FIN-WAIT-2 STATE) N
() N
(        Once in the ESTABLISHED state, it is possible to deliver segment) N
(        text to user RECEIVE buffers.  Text from segments can be moved) N
(        into buffers until either the buffer is full or the segment is) N
(        empty.  If the segment empties and carries an PUSH flag, then) N
(        the user is informed, when the buffer is returned, that a PUSH) N
(        has been received.) N
() N
(        When the TCP takes responsibility for delivering the data to the) N
(        user it must also acknowledge the receipt of the data.) N
() N
(        Once the TCP takes responsibility for the data it advances) N
(        RCV.NXT over the data accepted, and adjusts RCV.WND as) N
(        apporopriate to the current buffer availability.  The total of) N
(        RCV.NXT and RCV.WND should not be reduced.) N
() N
(        Please note the window management suggestions in section 3.7.) N
() N
(        Send an acknowledgment of the form:) N
() N
(          <SEQ=SND.NXT><ACK=RCV.NXT><CTL=ACK>) N
() N
(        This acknowledgment should be piggybacked on a segment being) N
(        transmitted if possible without incurring undue delay.) N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
([Page 74]                                                               ) N
() N
border
grestore
end % of iso1dict
pagesave restore
showpage
%%Page: (81-82) 41
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
(September 1981                                                          ) N
(                                           Transmission Control Protocol) N
(                                                Functional Specification) N
(SEGMENT ARRIVES) N
() N
() N
() N
(      CLOSE-WAIT STATE) N
(      CLOSING STATE) N
(      LAST-ACK STATE) N
(      TIME-WAIT STATE) N
() N
(        This should not occur, since a FIN has been received from the) N
(        remote side.  Ignore the segment text.) N
() N
(    eighth, check the FIN bit,) N
() N
(      Do not process the FIN if the state is CLOSED, LISTEN or SYN-SENT) N
(      since the SEG.SEQ cannot be validated; drop the segment and) N
(      return.) N
() N
(      If the FIN bit is set, signal the user "connection closing" and) N
(      return any pending RECEIVEs with same message, advance RCV.NXT) N
(      over the FIN, and send an acknowledgment for the FIN.  Note that) N
(      FIN implies PUSH for any segment text not yet delivered to the) N
(      user.) N
() N
(        SYN-RECEIVED STATE) N
(        ESTABLISHED STATE) N
() N
(          Enter the CLOSE-WAIT state.) N
() N
(        FIN-WAIT-1 STATE) N
() N
(          If our FIN has been ACKed \(perhaps in this segment\), then) N
(          enter TIME-WAIT, start the time-wait timer, turn off the other) N
(          timers; otherwise enter the CLOSING state.) N
() N
(        FIN-WAIT-2 STATE) N
() N
(          Enter the TIME-WAIT state.  Start the time-wait timer, turn) N
(          off the other timers.) N
() N
(        CLOSE-WAIT STATE) N
() N
(          Remain in the CLOSE-WAIT state.) N
() N
(        CLOSING STATE) N
() N
(          Remain in the CLOSING state.) N
() N
(        LAST-ACK STATE) N
() N
(          Remain in the LAST-ACK state.) N
() N
() N
(                                                               [Page 75]) N
() N
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
(                                                          September 1981) N
(Transmission Control Protocol) N
(Functional Specification) N
(                                                         SEGMENT ARRIVES) N
() N
() N
() N
(        TIME-WAIT STATE) N
() N
(          Remain in the TIME-WAIT state.  Restart the 2 MSL time-wait) N
(          timeout.) N
() N
(    and return.) N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
([Page 76]                                                               ) N
() N
border
grestore
end % of iso1dict
pagesave restore
showpage
%%Page: (83-84) 42
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
(September 1981                                                          ) N
(                                           Transmission Control Protocol) N
(                                                Functional Specification) N
(USER TIMEOUT) N
() N
() N
() N
(  USER TIMEOUT) N
() N
(    For any state if the user timeout expires, flush all queues, signal) N
(    the user "error:  connection aborted due to user timeout" in general) N
(    and for any outstanding calls, delete the TCB, enter the CLOSED) N
(    state and return.) N
() N
(  RETRANSMISSION TIMEOUT) N
() N
(    For any state if the retransmission timeout expires on a segment in) N
(    the retransmission queue, send the segment at the front of the) N
(    retransmission queue again, reinitialize the retransmission timer,) N
(    and return.) N
() N
(  TIME-WAIT TIMEOUT) N
() N
(    If the time-wait timeout expires on a connection delete the TCB,) N
(    enter the CLOSED state and return.) N
() N
(   ) N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
(                                                               [Page 77]) N
() N
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
(                                                          September 1981) N
(Transmission Control Protocol) N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
([Page 78]                                                               ) N
() N
border
grestore
end % of iso1dict
pagesave restore
showpage
%%Page: (85-86) 43
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
(September 1981                                                          ) N
(                                           Transmission Control Protocol) N
() N
() N
() N
(                                GLOSSARY) N
() N
() N
() N
(1822) N
(          BBN Report 1822, "The Specification of the Interconnection of) N
(          a Host and an IMP".  The specification of interface between a) N
(          host and the ARPANET.) N
() N
(ACK) N
(          A control bit \(acknowledge\) occupying no sequence space, which) N
(          indicates that the acknowledgment field of this segment) N
(          specifies the next sequence number the sender of this segment) N
(          is expecting to receive, hence acknowledging receipt of all) N
(          previous sequence numbers.) N
() N
(ARPANET message) N
(          The unit of transmission between a host and an IMP in the) N
(          ARPANET.  The maximum size is about 1012 octets \(8096 bits\).) N
() N
(ARPANET packet) N
(          A unit of transmission used internally in the ARPANET between) N
(          IMPs.  The maximum size is about 126 octets \(1008 bits\).) N
() N
(connection) N
(          A logical communication path identified by a pair of sockets.) N
() N
(datagram) N
(          A message sent in a packet switched computer communications) N
(          network.) N
() N
(Destination Address) N
(          The destination address, usually the network and host) N
(          identifiers.) N
() N
(FIN) N
(          A control bit \(finis\) occupying one sequence number, which) N
(          indicates that the sender will send no more data or control) N
(          occupying sequence space.) N
() N
(fragment) N
(          A portion of a logical unit of data, in particular an internet) N
(          fragment is a portion of an internet datagram.) N
() N
(FTP) N
(          A file transfer protocol.) N
() N
() N
() N
() N
() N
(                                                               [Page 79]) N
() N
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
(                                                          September 1981) N
(Transmission Control Protocol) N
(Glossary) N
() N
() N
() N
(header) N
(          Control information at the beginning of a message, segment,) N
(          fragment, packet or block of data.) N
() N
(host) N
(          A computer.  In particular a source or destination of messages) N
(          from the point of view of the communication network.) N
() N
(Identification) N
(          An Internet Protocol field.  This identifying value assigned) N
(          by the sender aids in assembling the fragments of a datagram.) N
() N
(IMP) N
(          The Interface Message Processor, the packet switch of the) N
(          ARPANET.) N
() N
(internet address) N
(          A source or destination address specific to the host level.) N
() N
(internet datagram) N
(          The unit of data exchanged between an internet module and the) N
(          higher level protocol together with the internet header.) N
() N
(internet fragment) N
(          A portion of the data of an internet datagram with an internet) N
(          header.) N
() N
(IP) N
(          Internet Protocol.) N
() N
(IRS) N
(          The Initial Receive Sequence number.  The first sequence) N
(          number used by the sender on a connection.) N
() N
(ISN) N
(          The Initial Sequence Number.  The first sequence number used) N
(          on a connection, \(either ISS or IRS\).  Selected on a clock) N
(          based procedure.) N
() N
(ISS) N
(          The Initial Send Sequence number.  The first sequence number) N
(          used by the sender on a connection.) N
() N
(leader) N
(          Control information at the beginning of a message or block of) N
(          data.  In particular, in the ARPANET, the control information) N
(          on an ARPANET message at the host-IMP interface.) N
() N
() N
() N
([Page 80]                                                               ) N
() N
border
grestore
end % of iso1dict
pagesave restore
showpage
%%Page: (87-88) 44
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
(September 1981                                                          ) N
(                                           Transmission Control Protocol) N
(                                                                Glossary) N
() N
() N
() N
(left sequence) N
(          This is the next sequence number to be acknowledged by the) N
(          data receiving TCP \(or the lowest currently unacknowledged) N
(          sequence number\) and is sometimes referred to as the left edge) N
(          of the send window.) N
() N
(local packet) N
(          The unit of transmission within a local network.) N
() N
(module) N
(          An implementation, usually in software, of a protocol or other) N
(          procedure.) N
() N
(MSL) N
(          Maximum Segment Lifetime, the time a TCP segment can exist in) N
(          the internetwork system.  Arbitrarily defined to be 2 minutes.) N
() N
(octet) N
(          An eight bit byte.) N
() N
(Options) N
(          An Option field may contain several options, and each option) N
(          may be several octets in length.  The options are used) N
(          primarily in testing situations; for example, to carry) N
(          timestamps.  Both the Internet Protocol and TCP provide for) N
(          options fields.) N
() N
(packet) N
(          A package of data with a header which may or may not be) N
(          logically complete.  More often a physical packaging than a) N
(          logical packaging of data.) N
() N
(port) N
(          The portion of a socket that specifies which logical input or) N
(          output channel of a process is associated with the data.) N
() N
(process) N
(          A program in execution.  A source or destination of data from) N
(          the point of view of the TCP or other host-to-host protocol.) N
() N
(PUSH) N
(          A control bit occupying no sequence space, indicating that) N
(          this segment contains data that must be pushed through to the) N
(          receiving user.) N
() N
(RCV.NXT) N
(          receive next sequence number) N
() N
() N
() N
(                                                               [Page 81]) N
() N
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
(                                                          September 1981) N
(Transmission Control Protocol) N
(Glossary) N
() N
() N
() N
(RCV.UP) N
(          receive urgent pointer) N
() N
(RCV.WND) N
(          receive window) N
() N
(receive next sequence number) N
(          This is the next sequence number the local TCP is expecting to) N
(          receive.) N
() N
(receive window) N
(          This represents the sequence numbers the local \(receiving\) TCP) N
(          is willing to receive.  Thus, the local TCP considers that) N
(          segments overlapping the range RCV.NXT to) N
(          RCV.NXT + RCV.WND - 1 carry acceptable data or control.) N
(          Segments containing sequence numbers entirely outside of this) N
(          range are considered duplicates and discarded.) N
() N
(RST) N
(          A control bit \(reset\), occupying no sequence space, indicating) N
(          that the receiver should delete the connection without further) N
(          interaction.  The receiver can determine, based on the) N
(          sequence number and acknowledgment fields of the incoming) N
(          segment, whether it should honor the reset command or ignore) N
(          it.  In no case does receipt of a segment containing RST give) N
(          rise to a RST in response.) N
() N
(RTP) N
(          Real Time Protocol:  A host-to-host protocol for communication) N
(          of time critical information.) N
() N
(SEG.ACK) N
(          segment acknowledgment) N
() N
(SEG.LEN) N
(          segment length) N
() N
(SEG.PRC) N
(          segment precedence value) N
() N
(SEG.SEQ) N
(          segment sequence) N
() N
(SEG.UP) N
(          segment urgent pointer field) N
() N
() N
() N
() N
() N
([Page 82]                                                               ) N
() N
border
grestore
end % of iso1dict
pagesave restore
showpage
%%Page: (89-90) 45
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
(September 1981                                                          ) N
(                                           Transmission Control Protocol) N
(                                                                Glossary) N
() N
() N
() N
(SEG.WND) N
(          segment window field) N
() N
(segment) N
(          A logical unit of data, in particular a TCP segment is the) N
(          unit of data transfered between a pair of TCP modules.) N
() N
(segment acknowledgment) N
(          The sequence number in the acknowledgment field of the) N
(          arriving segment.) N
() N
(segment length) N
(          The amount of sequence number space occupied by a segment,) N
(          including any controls which occupy sequence space.) N
() N
(segment sequence) N
(          The number in the sequence field of the arriving segment.) N
() N
(send sequence) N
(          This is the next sequence number the local \(sending\) TCP will) N
(          use on the connection.  It is initially selected from an) N
(          initial sequence number curve \(ISN\) and is incremented for) N
(          each octet of data or sequenced control transmitted.) N
() N
(send window) N
(          This represents the sequence numbers which the remote) N
(          \(receiving\) TCP is willing to receive.  It is the value of the) N
(          window field specified in segments from the remote \(data) N
(          receiving\) TCP.  The range of new sequence numbers which may) N
(          be emitted by a TCP lies between SND.NXT and) N
(          SND.UNA + SND.WND - 1. \(Retransmissions of sequence numbers) N
(          between SND.UNA and SND.NXT are expected, of course.\)) N
() N
(SND.NXT) N
(          send sequence) N
() N
(SND.UNA) N
(          left sequence) N
() N
(SND.UP) N
(          send urgent pointer) N
() N
(SND.WL1) N
(          segment sequence number at last window update) N
() N
(SND.WL2) N
(          segment acknowledgment number at last window update) N
() N
() N
() N
(                                                               [Page 83]) N
() N
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
(                                                          September 1981) N
(Transmission Control Protocol) N
(Glossary) N
() N
() N
() N
(SND.WND) N
(          send window) N
() N
(socket) N
(          An address which specifically includes a port identifier, that) N
(          is, the concatenation of an Internet Address with a TCP port.) N
() N
(Source Address) N
(          The source address, usually the network and host identifiers.) N
() N
(SYN) N
(          A control bit in the incoming segment, occupying one sequence) N
(          number, used at the initiation of a connection, to indicate) N
(          where the sequence numbering will start.) N
() N
(TCB) N
(          Transmission control block, the data structure that records) N
(          the state of a connection.) N
() N
(TCB.PRC) N
(          The precedence of the connection.) N
() N
(TCP) N
(          Transmission Control Protocol:  A host-to-host protocol for) N
(          reliable communication in internetwork environments.) N
() N
(TOS) N
(          Type of Service, an Internet Protocol field.) N
() N
(Type of Service) N
(          An Internet Protocol field which indicates the type of service) N
(          for this internet fragment.) N
() N
(URG) N
(          A control bit \(urgent\), occupying no sequence space, used to) N
(          indicate that the receiving user should be notified to do) N
(          urgent processing as long as there is data to be consumed with) N
(          sequence numbers less than the value indicated in the urgent) N
(          pointer.) N
() N
(urgent pointer) N
(          A control field meaningful only when the URG bit is on.  This) N
(          field communicates the value of the urgent pointer which) N
(          indicates the data octet associated with the sending user's) N
(          urgent call.) N
() N
(          ) N
() N
() N
() N
([Page 84]                                                               ) N
() N
border
grestore
end % of iso1dict
pagesave restore
showpage
%%Page: (91) 46
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs  sub store
x0 y0 moveto
() p n
(September 1981                                                          ) N
(                                           Transmission Control Protocol) N
() N
() N
() N
(                               REFERENCES) N
() N
() N
() N
([1]  Cerf, V., and R. Kahn, "A Protocol for Packet Network) N
(     Intercommunication", IEEE Transactions on Communications,) N
(     Vol. COM-22, No. 5, pp 637-648, May 1974.) N
() N
([2]  Postel, J. \(ed.\), "Internet Protocol - DARPA Internet Program) N
(     Protocol Specification", RFC 791, USC/Information Sciences) N
(     Institute, September 1981.) N
() N
([3]  Dalal, Y. and C. Sunshine, "Connection Management in Transport) N
(     Protocols", Computer Networks, Vol. 2, No. 6, pp. 454-473,) N
(     December 1978.) N
() N
([4]  Postel, J., "Assigned Numbers", RFC 790, USC/Information Sciences) N
(     Institute, September 1981.) N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
(                                                               [Page 85]) N
() N
border
grestore
end % of iso1dict
pagesave restore
showpage

%%Trailer
end
%%EOF
