
Protocol Components:
	Record Client to Server:
		* Retrieve Session Token  (?)
			* Xml-RPC 	-> navigator.userAgent
					<- session Token
		* Event Protocol, 6 bytes/Event + token in http (url?) (+)
			frequent, lots of data
		* Xml-RPC Geometry and user agent information. (+client)
			occasionally
			- when to generate (?) which window events?
	
	Playback events:
		more stress for client acceptable, we control them
		* Retrieve Playback session token (intialization)
		* Retrieve information about available sessions
		* "Pull" events from server

	Heat maps:
		* morph available geometries to a "normalized" view.
		* morph mouse postitions into "normalized" view.
		* visualization (mouse positions "lighter", click positions "redder")
	

(1) Session Initialization
	Client
		xmlrpc geometry call with package and time set to 0, server responds 
		with session token that's passed as a get parameter in all future requests. 
	server
		see (3) below. If call contains no session information
		and `package` and `time` are 0:
 
		accept xmlrpc calls, generate session token, save useragent, user ip, server
		time and generated token to SESSION
		
			

(2) Event Protocol
	Client
		as soon as the session token is available, start
		recording events (how to bridge time between first
		events and availability of session token?) 

		PACKET
		
	 	6 bits type, 18 bits time, 12 bits x, 12 bits y = 6 bytes
		
		TYPE
		
		The six type bits currently signify six diffrent packet
		functions that may b e combined:
		
		MOUSE_MOVE - regular mouse movement event
		MOUSE_DOWN - mouse clicked
		MOUSE_UP - mouse released (combine these to and maintain
				state on server ?)
		TIME_RESET - signifies overflow of the 18 bit time value 
		GEOMETRY - signifies geometry has changed (new geometry
			is transmitted in XMLRPC)
		BYE - signifies end of a recording session
			(window.close, unload ?)

		
		SERVERMESSAGE (event package)

		HTTP POST to URL+?ses=<session>
		content:
		<count> + ':' + <PACKET>'s from above encoded in base64

	Server
		* check session is legitimate against SESSIONS
		* save packet information.

		* on BYE packet, update SESSSIONS end time

(3) Geometry Protocol

	Client
		The client signals the server a change in client screen
		geometry, e.g. scroll, to the server using a GEOMETRY
		event packet. The actual geometry is transfered to the
		server using an XML-RPC call containing the following 
		information:

		{
			package:
			time:
			useragent: 
			geometry {
				canvas: geometry
				for each id	-> #idName: geometry
				for each class	-> .className: [geometry, ...]	
				for each tag	-> tagName: [geometry, ...]
			}
		}	

		geomtry ::= [x0,y0,x1,y1]
		
		the `package` and `time` parameters reference the
		GEOMETRY packet that announced the geometry change.
		
		XMLRPC request is sent to

		web_service_url+?ses=<>
		
	Server
		* check the session token against SESSIONS
			unless no session && package == time == 0 
		* render the geometry to filesystem
			iamges/<session>_<count>.png
		  where `count` is the nth different geometry for this
		  session.


(4) Playback protocol

	Client
		* Client requests auth token and list of available 
		  playback session.
		* Client continuously queries for new packages
		* Client queues events to be played back.
		* Playback client receives JSON encoded "packages" as
		  arrays of [type,time, x, y] events.
		* load new background from
			 url/images/<session>_<count>.png


